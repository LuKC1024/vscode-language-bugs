/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* program := data=list | sections=section+ ws
* section := model | data
* model := ws 'model' ws '{' body=relation* ws '}'
* data  := ws 'data' ws '{' body=relation* ws '}'
* relation := stochasticRelation | deterministicRelation | indexedRelation
* stochasticRelation      := lhs=exp ws '~' rhs=exp cut=cut? '\s*;'?
* deterministicRelation   := lhs=exp ws '<-' rhs=exp '\s*;'?
* indexedRelation         := ws 'for' ws '\(' name=name ws 'in' domain=exp ws '\)' ws '{' ws body=relation* ws '}'
* cut := ws 'C[(]' lower=exp? ws ',' upper=exp? ws '[)]' | ws 'T[(]' lower=exp? ws ',' upper=exp? ws '[)]' | ws 'I[(]' lower=exp? ws ',' upper=exp? ws '[)]'
* // expression
* exp := exp5
* exp0 := num | structure | list | ws '\(' exp=exp5 ws '\)' | name 
* exp1 := exp0 application*
* exp2 := ws '-' exp1 | exp1
* exp3 := left=exp3 ws '\+' right=exp2 | left=exp3 ws '-' right=exp2 | exp2
* exp4 := left=exp4 ws '\*' right=exp3 | left=exp4 ws '/' right=exp3 | exp3
* exp5 := left=exp5 ws ':' right=exp4 | exp4 
* application := ws '[(]' operand=anonArgs ws '[)]' | ws '\[' index=optionalArgs ws '\]'
* structure   := ws 'structure[(]' ws '\.' ws 'Data' ws '=' data=exp ws ',' ws '\.' ws 'Dim' ws '=' dim=exp ws '[)]'
* list        := ws 'list[(]' content=namedArgs ws '[)]'
* anonArgs       := content={first=exp rest=anonArgsRest*}?
* anonArgsRest   := ws ',' item=exp
* optionalArgs       := content={first=exp? rest=optionalArgsRest*}?
* optionalArgsRest   := ws ',' item=exp?
* namedArgs       := content={firstName=name ws '=' firstExp=exp rest=namedArgsRest*}?
* namedArgsRest   := ws ',' name=name ws '=' value=exp
* name := ws from=@ value='[a-zA-Z][a-zA-Z0-9._]*' to=@
* // number
* num := ws value='-?([\d]+([.][\d]+)?|([\d]+)?[.][\d]+)([eE]-?[\d]+)?'
* // whitespace
* ws := '(\s*([#][^\n]*[\n])?)*'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    program_1 = "program_1",
    program_2 = "program_2",
    section_1 = "section_1",
    section_2 = "section_2",
    model = "model",
    data = "data",
    relation_1 = "relation_1",
    relation_2 = "relation_2",
    relation_3 = "relation_3",
    stochasticRelation = "stochasticRelation",
    deterministicRelation = "deterministicRelation",
    indexedRelation = "indexedRelation",
    cut_1 = "cut_1",
    cut_2 = "cut_2",
    cut_3 = "cut_3",
    exp = "exp",
    exp0_1 = "exp0_1",
    exp0_2 = "exp0_2",
    exp0_3 = "exp0_3",
    exp0_4 = "exp0_4",
    exp0_5 = "exp0_5",
    exp1 = "exp1",
    exp2_1 = "exp2_1",
    exp2_2 = "exp2_2",
    exp3_1 = "exp3_1",
    exp3_2 = "exp3_2",
    exp3_3 = "exp3_3",
    exp4_1 = "exp4_1",
    exp4_2 = "exp4_2",
    exp4_3 = "exp4_3",
    exp5_1 = "exp5_1",
    exp5_2 = "exp5_2",
    application_1 = "application_1",
    application_2 = "application_2",
    structure = "structure",
    list = "list",
    anonArgs = "anonArgs",
    anonArgs_$0 = "anonArgs_$0",
    anonArgsRest = "anonArgsRest",
    optionalArgs = "optionalArgs",
    optionalArgs_$0 = "optionalArgs_$0",
    optionalArgsRest = "optionalArgsRest",
    namedArgs = "namedArgs",
    namedArgs_$0 = "namedArgs_$0",
    namedArgsRest = "namedArgsRest",
    name = "name",
    num = "num",
    ws = "ws",
}
export type program = program_1 | program_2;
export interface program_1 {
    kind: ASTKinds.program_1;
    data: list;
}
export interface program_2 {
    kind: ASTKinds.program_2;
    sections: section[];
}
export type section = section_1 | section_2;
export type section_1 = model;
export type section_2 = data;
export interface model {
    kind: ASTKinds.model;
    body: relation[];
}
export interface data {
    kind: ASTKinds.data;
    body: relation[];
}
export type relation = relation_1 | relation_2 | relation_3;
export type relation_1 = stochasticRelation;
export type relation_2 = deterministicRelation;
export type relation_3 = indexedRelation;
export interface stochasticRelation {
    kind: ASTKinds.stochasticRelation;
    lhs: exp;
    rhs: exp;
    cut: Nullable<cut>;
}
export interface deterministicRelation {
    kind: ASTKinds.deterministicRelation;
    lhs: exp;
    rhs: exp;
}
export interface indexedRelation {
    kind: ASTKinds.indexedRelation;
    name: name;
    domain: exp;
    body: relation[];
}
export type cut = cut_1 | cut_2 | cut_3;
export interface cut_1 {
    kind: ASTKinds.cut_1;
    lower: Nullable<exp>;
    upper: Nullable<exp>;
}
export interface cut_2 {
    kind: ASTKinds.cut_2;
    lower: Nullable<exp>;
    upper: Nullable<exp>;
}
export interface cut_3 {
    kind: ASTKinds.cut_3;
    lower: Nullable<exp>;
    upper: Nullable<exp>;
}
export type exp = exp5;
export type exp0 = exp0_1 | exp0_2 | exp0_3 | exp0_4 | exp0_5;
export type exp0_1 = num;
export type exp0_2 = structure;
export type exp0_3 = list;
export interface exp0_4 {
    kind: ASTKinds.exp0_4;
    exp: exp5;
}
export type exp0_5 = name;
export interface exp1 {
    kind: ASTKinds.exp1;
}
export type exp2 = exp2_1 | exp2_2;
export interface exp2_1 {
    kind: ASTKinds.exp2_1;
}
export type exp2_2 = exp1;
export type exp3 = exp3_1 | exp3_2 | exp3_3;
export interface exp3_1 {
    kind: ASTKinds.exp3_1;
    left: exp3;
    right: exp2;
}
export interface exp3_2 {
    kind: ASTKinds.exp3_2;
    left: exp3;
    right: exp2;
}
export type exp3_3 = exp2;
export type exp4 = exp4_1 | exp4_2 | exp4_3;
export interface exp4_1 {
    kind: ASTKinds.exp4_1;
    left: exp4;
    right: exp3;
}
export interface exp4_2 {
    kind: ASTKinds.exp4_2;
    left: exp4;
    right: exp3;
}
export type exp4_3 = exp3;
export type exp5 = exp5_1 | exp5_2;
export interface exp5_1 {
    kind: ASTKinds.exp5_1;
    left: exp5;
    right: exp4;
}
export type exp5_2 = exp4;
export type application = application_1 | application_2;
export interface application_1 {
    kind: ASTKinds.application_1;
    operand: anonArgs;
}
export interface application_2 {
    kind: ASTKinds.application_2;
    index: optionalArgs;
}
export interface structure {
    kind: ASTKinds.structure;
    data: exp;
    dim: exp;
}
export interface list {
    kind: ASTKinds.list;
    content: namedArgs;
}
export interface anonArgs {
    kind: ASTKinds.anonArgs;
    content: Nullable<anonArgs_$0>;
}
export interface anonArgs_$0 {
    kind: ASTKinds.anonArgs_$0;
    first: exp;
    rest: anonArgsRest[];
}
export interface anonArgsRest {
    kind: ASTKinds.anonArgsRest;
    item: exp;
}
export interface optionalArgs {
    kind: ASTKinds.optionalArgs;
    content: Nullable<optionalArgs_$0>;
}
export interface optionalArgs_$0 {
    kind: ASTKinds.optionalArgs_$0;
    first: Nullable<exp>;
    rest: optionalArgsRest[];
}
export interface optionalArgsRest {
    kind: ASTKinds.optionalArgsRest;
    item: Nullable<exp>;
}
export interface namedArgs {
    kind: ASTKinds.namedArgs;
    content: Nullable<namedArgs_$0>;
}
export interface namedArgs_$0 {
    kind: ASTKinds.namedArgs_$0;
    firstName: name;
    firstExp: exp;
    rest: namedArgsRest[];
}
export interface namedArgsRest {
    kind: ASTKinds.namedArgsRest;
    name: name;
    value: exp;
}
export interface name {
    kind: ASTKinds.name;
    from: PosInfo;
    value: string;
    to: PosInfo;
}
export interface num {
    kind: ASTKinds.num;
    value: string;
}
export type ws = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
        this.$scope$exp3$memo.clear();
        this.$scope$exp4$memo.clear();
        this.$scope$exp5$memo.clear();
    }
    protected $scope$exp3$memo: Map<number, [Nullable<exp3>, PosInfo]> = new Map();
    protected $scope$exp4$memo: Map<number, [Nullable<exp4>, PosInfo]> = new Map();
    protected $scope$exp5$memo: Map<number, [Nullable<exp5>, PosInfo]> = new Map();
    public matchprogram($$dpth: number, $$cr?: ErrorTracker): Nullable<program> {
        return this.choice<program>([
            () => this.matchprogram_1($$dpth + 1, $$cr),
            () => this.matchprogram_2($$dpth + 1, $$cr),
        ]);
    }
    public matchprogram_1($$dpth: number, $$cr?: ErrorTracker): Nullable<program_1> {
        return this.run<program_1>($$dpth,
            () => {
                let $scope$data: Nullable<list>;
                let $$res: Nullable<program_1> = null;
                if (true
                    && ($scope$data = this.matchlist($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.program_1, data: $scope$data};
                }
                return $$res;
            });
    }
    public matchprogram_2($$dpth: number, $$cr?: ErrorTracker): Nullable<program_2> {
        return this.run<program_2>($$dpth,
            () => {
                let $scope$sections: Nullable<section[]>;
                let $$res: Nullable<program_2> = null;
                if (true
                    && ($scope$sections = this.loop<section>(() => this.matchsection($$dpth + 1, $$cr), false)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.program_2, sections: $scope$sections};
                }
                return $$res;
            });
    }
    public matchsection($$dpth: number, $$cr?: ErrorTracker): Nullable<section> {
        return this.choice<section>([
            () => this.matchsection_1($$dpth + 1, $$cr),
            () => this.matchsection_2($$dpth + 1, $$cr),
        ]);
    }
    public matchsection_1($$dpth: number, $$cr?: ErrorTracker): Nullable<section_1> {
        return this.matchmodel($$dpth + 1, $$cr);
    }
    public matchsection_2($$dpth: number, $$cr?: ErrorTracker): Nullable<section_2> {
        return this.matchdata($$dpth + 1, $$cr);
    }
    public matchmodel($$dpth: number, $$cr?: ErrorTracker): Nullable<model> {
        return this.run<model>($$dpth,
            () => {
                let $scope$body: Nullable<relation[]>;
                let $$res: Nullable<model> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:model)`, $$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:{)`, $$dpth + 1, $$cr) !== null
                    && ($scope$body = this.loop<relation>(() => this.matchrelation($$dpth + 1, $$cr), true)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.model, body: $scope$body};
                }
                return $$res;
            });
    }
    public matchdata($$dpth: number, $$cr?: ErrorTracker): Nullable<data> {
        return this.run<data>($$dpth,
            () => {
                let $scope$body: Nullable<relation[]>;
                let $$res: Nullable<data> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:data)`, $$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:{)`, $$dpth + 1, $$cr) !== null
                    && ($scope$body = this.loop<relation>(() => this.matchrelation($$dpth + 1, $$cr), true)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.data, body: $scope$body};
                }
                return $$res;
            });
    }
    public matchrelation($$dpth: number, $$cr?: ErrorTracker): Nullable<relation> {
        return this.choice<relation>([
            () => this.matchrelation_1($$dpth + 1, $$cr),
            () => this.matchrelation_2($$dpth + 1, $$cr),
            () => this.matchrelation_3($$dpth + 1, $$cr),
        ]);
    }
    public matchrelation_1($$dpth: number, $$cr?: ErrorTracker): Nullable<relation_1> {
        return this.matchstochasticRelation($$dpth + 1, $$cr);
    }
    public matchrelation_2($$dpth: number, $$cr?: ErrorTracker): Nullable<relation_2> {
        return this.matchdeterministicRelation($$dpth + 1, $$cr);
    }
    public matchrelation_3($$dpth: number, $$cr?: ErrorTracker): Nullable<relation_3> {
        return this.matchindexedRelation($$dpth + 1, $$cr);
    }
    public matchstochasticRelation($$dpth: number, $$cr?: ErrorTracker): Nullable<stochasticRelation> {
        return this.run<stochasticRelation>($$dpth,
            () => {
                let $scope$lhs: Nullable<exp>;
                let $scope$rhs: Nullable<exp>;
                let $scope$cut: Nullable<Nullable<cut>>;
                let $$res: Nullable<stochasticRelation> = null;
                if (true
                    && ($scope$lhs = this.matchexp($$dpth + 1, $$cr)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:~)`, $$dpth + 1, $$cr) !== null
                    && ($scope$rhs = this.matchexp($$dpth + 1, $$cr)) !== null
                    && (($scope$cut = this.matchcut($$dpth + 1, $$cr)) || true)
                    && ((this.regexAccept(String.raw`(?:\s*;)`, $$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.stochasticRelation, lhs: $scope$lhs, rhs: $scope$rhs, cut: $scope$cut};
                }
                return $$res;
            });
    }
    public matchdeterministicRelation($$dpth: number, $$cr?: ErrorTracker): Nullable<deterministicRelation> {
        return this.run<deterministicRelation>($$dpth,
            () => {
                let $scope$lhs: Nullable<exp>;
                let $scope$rhs: Nullable<exp>;
                let $$res: Nullable<deterministicRelation> = null;
                if (true
                    && ($scope$lhs = this.matchexp($$dpth + 1, $$cr)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:<-)`, $$dpth + 1, $$cr) !== null
                    && ($scope$rhs = this.matchexp($$dpth + 1, $$cr)) !== null
                    && ((this.regexAccept(String.raw`(?:\s*;)`, $$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.deterministicRelation, lhs: $scope$lhs, rhs: $scope$rhs};
                }
                return $$res;
            });
    }
    public matchindexedRelation($$dpth: number, $$cr?: ErrorTracker): Nullable<indexedRelation> {
        return this.run<indexedRelation>($$dpth,
            () => {
                let $scope$name: Nullable<name>;
                let $scope$domain: Nullable<exp>;
                let $scope$body: Nullable<relation[]>;
                let $$res: Nullable<indexedRelation> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:for)`, $$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchname($$dpth + 1, $$cr)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:in)`, $$dpth + 1, $$cr) !== null
                    && ($scope$domain = this.matchexp($$dpth + 1, $$cr)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:{)`, $$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$body = this.loop<relation>(() => this.matchrelation($$dpth + 1, $$cr), true)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.indexedRelation, name: $scope$name, domain: $scope$domain, body: $scope$body};
                }
                return $$res;
            });
    }
    public matchcut($$dpth: number, $$cr?: ErrorTracker): Nullable<cut> {
        return this.choice<cut>([
            () => this.matchcut_1($$dpth + 1, $$cr),
            () => this.matchcut_2($$dpth + 1, $$cr),
            () => this.matchcut_3($$dpth + 1, $$cr),
        ]);
    }
    public matchcut_1($$dpth: number, $$cr?: ErrorTracker): Nullable<cut_1> {
        return this.run<cut_1>($$dpth,
            () => {
                let $scope$lower: Nullable<Nullable<exp>>;
                let $scope$upper: Nullable<Nullable<exp>>;
                let $$res: Nullable<cut_1> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:C[(])`, $$dpth + 1, $$cr) !== null
                    && (($scope$lower = this.matchexp($$dpth + 1, $$cr)) || true)
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && (($scope$upper = this.matchexp($$dpth + 1, $$cr)) || true)
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[)])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cut_1, lower: $scope$lower, upper: $scope$upper};
                }
                return $$res;
            });
    }
    public matchcut_2($$dpth: number, $$cr?: ErrorTracker): Nullable<cut_2> {
        return this.run<cut_2>($$dpth,
            () => {
                let $scope$lower: Nullable<Nullable<exp>>;
                let $scope$upper: Nullable<Nullable<exp>>;
                let $$res: Nullable<cut_2> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:T[(])`, $$dpth + 1, $$cr) !== null
                    && (($scope$lower = this.matchexp($$dpth + 1, $$cr)) || true)
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && (($scope$upper = this.matchexp($$dpth + 1, $$cr)) || true)
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[)])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cut_2, lower: $scope$lower, upper: $scope$upper};
                }
                return $$res;
            });
    }
    public matchcut_3($$dpth: number, $$cr?: ErrorTracker): Nullable<cut_3> {
        return this.run<cut_3>($$dpth,
            () => {
                let $scope$lower: Nullable<Nullable<exp>>;
                let $scope$upper: Nullable<Nullable<exp>>;
                let $$res: Nullable<cut_3> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:I[(])`, $$dpth + 1, $$cr) !== null
                    && (($scope$lower = this.matchexp($$dpth + 1, $$cr)) || true)
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && (($scope$upper = this.matchexp($$dpth + 1, $$cr)) || true)
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[)])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cut_3, lower: $scope$lower, upper: $scope$upper};
                }
                return $$res;
            });
    }
    public matchexp($$dpth: number, $$cr?: ErrorTracker): Nullable<exp> {
        return this.matchexp5($$dpth + 1, $$cr);
    }
    public matchexp0($$dpth: number, $$cr?: ErrorTracker): Nullable<exp0> {
        return this.choice<exp0>([
            () => this.matchexp0_1($$dpth + 1, $$cr),
            () => this.matchexp0_2($$dpth + 1, $$cr),
            () => this.matchexp0_3($$dpth + 1, $$cr),
            () => this.matchexp0_4($$dpth + 1, $$cr),
            () => this.matchexp0_5($$dpth + 1, $$cr),
        ]);
    }
    public matchexp0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<exp0_1> {
        return this.matchnum($$dpth + 1, $$cr);
    }
    public matchexp0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<exp0_2> {
        return this.matchstructure($$dpth + 1, $$cr);
    }
    public matchexp0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<exp0_3> {
        return this.matchlist($$dpth + 1, $$cr);
    }
    public matchexp0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<exp0_4> {
        return this.run<exp0_4>($$dpth,
            () => {
                let $scope$exp: Nullable<exp5>;
                let $$res: Nullable<exp0_4> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && ($scope$exp = this.matchexp5($$dpth + 1, $$cr)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.exp0_4, exp: $scope$exp};
                }
                return $$res;
            });
    }
    public matchexp0_5($$dpth: number, $$cr?: ErrorTracker): Nullable<exp0_5> {
        return this.matchname($$dpth + 1, $$cr);
    }
    public matchexp1($$dpth: number, $$cr?: ErrorTracker): Nullable<exp1> {
        return this.run<exp1>($$dpth,
            () => {
                let $$res: Nullable<exp1> = null;
                if (true
                    && this.matchexp0($$dpth + 1, $$cr) !== null
                    && this.loop<application>(() => this.matchapplication($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.exp1, };
                }
                return $$res;
            });
    }
    public matchexp2($$dpth: number, $$cr?: ErrorTracker): Nullable<exp2> {
        return this.choice<exp2>([
            () => this.matchexp2_1($$dpth + 1, $$cr),
            () => this.matchexp2_2($$dpth + 1, $$cr),
        ]);
    }
    public matchexp2_1($$dpth: number, $$cr?: ErrorTracker): Nullable<exp2_1> {
        return this.run<exp2_1>($$dpth,
            () => {
                let $$res: Nullable<exp2_1> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr) !== null
                    && this.matchexp1($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.exp2_1, };
                }
                return $$res;
            });
    }
    public matchexp2_2($$dpth: number, $$cr?: ErrorTracker): Nullable<exp2_2> {
        return this.matchexp1($$dpth + 1, $$cr);
    }
    public matchexp3($$dpth: number, $$cr?: ErrorTracker): Nullable<exp3> {
        const fn = () => {
            return this.choice<exp3>([
                () => this.matchexp3_1($$dpth + 1, $$cr),
                () => this.matchexp3_2($$dpth + 1, $$cr),
                () => this.matchexp3_3($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$exp3$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$exp3$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<exp3> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$exp3$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchexp3_1($$dpth: number, $$cr?: ErrorTracker): Nullable<exp3_1> {
        return this.run<exp3_1>($$dpth,
            () => {
                let $scope$left: Nullable<exp3>;
                let $scope$right: Nullable<exp2>;
                let $$res: Nullable<exp3_1> = null;
                if (true
                    && ($scope$left = this.matchexp3($$dpth + 1, $$cr)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchexp2($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.exp3_1, left: $scope$left, right: $scope$right};
                }
                return $$res;
            });
    }
    public matchexp3_2($$dpth: number, $$cr?: ErrorTracker): Nullable<exp3_2> {
        return this.run<exp3_2>($$dpth,
            () => {
                let $scope$left: Nullable<exp3>;
                let $scope$right: Nullable<exp2>;
                let $$res: Nullable<exp3_2> = null;
                if (true
                    && ($scope$left = this.matchexp3($$dpth + 1, $$cr)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchexp2($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.exp3_2, left: $scope$left, right: $scope$right};
                }
                return $$res;
            });
    }
    public matchexp3_3($$dpth: number, $$cr?: ErrorTracker): Nullable<exp3_3> {
        return this.matchexp2($$dpth + 1, $$cr);
    }
    public matchexp4($$dpth: number, $$cr?: ErrorTracker): Nullable<exp4> {
        const fn = () => {
            return this.choice<exp4>([
                () => this.matchexp4_1($$dpth + 1, $$cr),
                () => this.matchexp4_2($$dpth + 1, $$cr),
                () => this.matchexp4_3($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$exp4$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$exp4$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<exp4> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$exp4$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchexp4_1($$dpth: number, $$cr?: ErrorTracker): Nullable<exp4_1> {
        return this.run<exp4_1>($$dpth,
            () => {
                let $scope$left: Nullable<exp4>;
                let $scope$right: Nullable<exp3>;
                let $$res: Nullable<exp4_1> = null;
                if (true
                    && ($scope$left = this.matchexp4($$dpth + 1, $$cr)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchexp3($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.exp4_1, left: $scope$left, right: $scope$right};
                }
                return $$res;
            });
    }
    public matchexp4_2($$dpth: number, $$cr?: ErrorTracker): Nullable<exp4_2> {
        return this.run<exp4_2>($$dpth,
            () => {
                let $scope$left: Nullable<exp4>;
                let $scope$right: Nullable<exp3>;
                let $$res: Nullable<exp4_2> = null;
                if (true
                    && ($scope$left = this.matchexp4($$dpth + 1, $$cr)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:/)`, $$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchexp3($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.exp4_2, left: $scope$left, right: $scope$right};
                }
                return $$res;
            });
    }
    public matchexp4_3($$dpth: number, $$cr?: ErrorTracker): Nullable<exp4_3> {
        return this.matchexp3($$dpth + 1, $$cr);
    }
    public matchexp5($$dpth: number, $$cr?: ErrorTracker): Nullable<exp5> {
        const fn = () => {
            return this.choice<exp5>([
                () => this.matchexp5_1($$dpth + 1, $$cr),
                () => this.matchexp5_2($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$exp5$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$exp5$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<exp5> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$exp5$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchexp5_1($$dpth: number, $$cr?: ErrorTracker): Nullable<exp5_1> {
        return this.run<exp5_1>($$dpth,
            () => {
                let $scope$left: Nullable<exp5>;
                let $scope$right: Nullable<exp4>;
                let $$res: Nullable<exp5_1> = null;
                if (true
                    && ($scope$left = this.matchexp5($$dpth + 1, $$cr)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchexp4($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.exp5_1, left: $scope$left, right: $scope$right};
                }
                return $$res;
            });
    }
    public matchexp5_2($$dpth: number, $$cr?: ErrorTracker): Nullable<exp5_2> {
        return this.matchexp4($$dpth + 1, $$cr);
    }
    public matchapplication($$dpth: number, $$cr?: ErrorTracker): Nullable<application> {
        return this.choice<application>([
            () => this.matchapplication_1($$dpth + 1, $$cr),
            () => this.matchapplication_2($$dpth + 1, $$cr),
        ]);
    }
    public matchapplication_1($$dpth: number, $$cr?: ErrorTracker): Nullable<application_1> {
        return this.run<application_1>($$dpth,
            () => {
                let $scope$operand: Nullable<anonArgs>;
                let $$res: Nullable<application_1> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[(])`, $$dpth + 1, $$cr) !== null
                    && ($scope$operand = this.matchanonArgs($$dpth + 1, $$cr)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[)])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.application_1, operand: $scope$operand};
                }
                return $$res;
            });
    }
    public matchapplication_2($$dpth: number, $$cr?: ErrorTracker): Nullable<application_2> {
        return this.run<application_2>($$dpth,
            () => {
                let $scope$index: Nullable<optionalArgs>;
                let $$res: Nullable<application_2> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null
                    && ($scope$index = this.matchoptionalArgs($$dpth + 1, $$cr)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.application_2, index: $scope$index};
                }
                return $$res;
            });
    }
    public matchstructure($$dpth: number, $$cr?: ErrorTracker): Nullable<structure> {
        return this.run<structure>($$dpth,
            () => {
                let $scope$data: Nullable<exp>;
                let $scope$dim: Nullable<exp>;
                let $$res: Nullable<structure> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:structure[(])`, $$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\.)`, $$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:Data)`, $$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$data = this.matchexp($$dpth + 1, $$cr)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\.)`, $$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:Dim)`, $$dpth + 1, $$cr) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$dim = this.matchexp($$dpth + 1, $$cr)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[)])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.structure, data: $scope$data, dim: $scope$dim};
                }
                return $$res;
            });
    }
    public matchlist($$dpth: number, $$cr?: ErrorTracker): Nullable<list> {
        return this.run<list>($$dpth,
            () => {
                let $scope$content: Nullable<namedArgs>;
                let $$res: Nullable<list> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:list[(])`, $$dpth + 1, $$cr) !== null
                    && ($scope$content = this.matchnamedArgs($$dpth + 1, $$cr)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[)])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.list, content: $scope$content};
                }
                return $$res;
            });
    }
    public matchanonArgs($$dpth: number, $$cr?: ErrorTracker): Nullable<anonArgs> {
        return this.run<anonArgs>($$dpth,
            () => {
                let $scope$content: Nullable<Nullable<anonArgs_$0>>;
                let $$res: Nullable<anonArgs> = null;
                if (true
                    && (($scope$content = this.matchanonArgs_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.anonArgs, content: $scope$content};
                }
                return $$res;
            });
    }
    public matchanonArgs_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<anonArgs_$0> {
        return this.run<anonArgs_$0>($$dpth,
            () => {
                let $scope$first: Nullable<exp>;
                let $scope$rest: Nullable<anonArgsRest[]>;
                let $$res: Nullable<anonArgs_$0> = null;
                if (true
                    && ($scope$first = this.matchexp($$dpth + 1, $$cr)) !== null
                    && ($scope$rest = this.loop<anonArgsRest>(() => this.matchanonArgsRest($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.anonArgs_$0, first: $scope$first, rest: $scope$rest};
                }
                return $$res;
            });
    }
    public matchanonArgsRest($$dpth: number, $$cr?: ErrorTracker): Nullable<anonArgsRest> {
        return this.run<anonArgsRest>($$dpth,
            () => {
                let $scope$item: Nullable<exp>;
                let $$res: Nullable<anonArgsRest> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && ($scope$item = this.matchexp($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.anonArgsRest, item: $scope$item};
                }
                return $$res;
            });
    }
    public matchoptionalArgs($$dpth: number, $$cr?: ErrorTracker): Nullable<optionalArgs> {
        return this.run<optionalArgs>($$dpth,
            () => {
                let $scope$content: Nullable<Nullable<optionalArgs_$0>>;
                let $$res: Nullable<optionalArgs> = null;
                if (true
                    && (($scope$content = this.matchoptionalArgs_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.optionalArgs, content: $scope$content};
                }
                return $$res;
            });
    }
    public matchoptionalArgs_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<optionalArgs_$0> {
        return this.run<optionalArgs_$0>($$dpth,
            () => {
                let $scope$first: Nullable<Nullable<exp>>;
                let $scope$rest: Nullable<optionalArgsRest[]>;
                let $$res: Nullable<optionalArgs_$0> = null;
                if (true
                    && (($scope$first = this.matchexp($$dpth + 1, $$cr)) || true)
                    && ($scope$rest = this.loop<optionalArgsRest>(() => this.matchoptionalArgsRest($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.optionalArgs_$0, first: $scope$first, rest: $scope$rest};
                }
                return $$res;
            });
    }
    public matchoptionalArgsRest($$dpth: number, $$cr?: ErrorTracker): Nullable<optionalArgsRest> {
        return this.run<optionalArgsRest>($$dpth,
            () => {
                let $scope$item: Nullable<Nullable<exp>>;
                let $$res: Nullable<optionalArgsRest> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && (($scope$item = this.matchexp($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.optionalArgsRest, item: $scope$item};
                }
                return $$res;
            });
    }
    public matchnamedArgs($$dpth: number, $$cr?: ErrorTracker): Nullable<namedArgs> {
        return this.run<namedArgs>($$dpth,
            () => {
                let $scope$content: Nullable<Nullable<namedArgs_$0>>;
                let $$res: Nullable<namedArgs> = null;
                if (true
                    && (($scope$content = this.matchnamedArgs_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.namedArgs, content: $scope$content};
                }
                return $$res;
            });
    }
    public matchnamedArgs_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<namedArgs_$0> {
        return this.run<namedArgs_$0>($$dpth,
            () => {
                let $scope$firstName: Nullable<name>;
                let $scope$firstExp: Nullable<exp>;
                let $scope$rest: Nullable<namedArgsRest[]>;
                let $$res: Nullable<namedArgs_$0> = null;
                if (true
                    && ($scope$firstName = this.matchname($$dpth + 1, $$cr)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$firstExp = this.matchexp($$dpth + 1, $$cr)) !== null
                    && ($scope$rest = this.loop<namedArgsRest>(() => this.matchnamedArgsRest($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.namedArgs_$0, firstName: $scope$firstName, firstExp: $scope$firstExp, rest: $scope$rest};
                }
                return $$res;
            });
    }
    public matchnamedArgsRest($$dpth: number, $$cr?: ErrorTracker): Nullable<namedArgsRest> {
        return this.run<namedArgsRest>($$dpth,
            () => {
                let $scope$name: Nullable<name>;
                let $scope$value: Nullable<exp>;
                let $$res: Nullable<namedArgsRest> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchname($$dpth + 1, $$cr)) !== null
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchexp($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.namedArgsRest, name: $scope$name, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchname($$dpth: number, $$cr?: ErrorTracker): Nullable<name> {
        return this.run<name>($$dpth,
            () => {
                let $scope$from: Nullable<PosInfo>;
                let $scope$value: Nullable<string>;
                let $scope$to: Nullable<PosInfo>;
                let $$res: Nullable<name> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$from = this.mark()) !== null
                    && ($scope$value = this.regexAccept(String.raw`(?:[a-zA-Z][a-zA-Z0-9._]*)`, $$dpth + 1, $$cr)) !== null
                    && ($scope$to = this.mark()) !== null
                ) {
                    $$res = {kind: ASTKinds.name, from: $scope$from, value: $scope$value, to: $scope$to};
                }
                return $$res;
            });
    }
    public matchnum($$dpth: number, $$cr?: ErrorTracker): Nullable<num> {
        return this.run<num>($$dpth,
            () => {
                let $scope$value: Nullable<string>;
                let $$res: Nullable<num> = null;
                if (true
                    && this.matchws($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.regexAccept(String.raw`(?:-?([\d]+([.][\d]+)?|([\d]+)?[.][\d]+)([eE]-?[\d]+)?)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.num, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchws($$dpth: number, $$cr?: ErrorTracker): Nullable<ws> {
        return this.regexAccept(String.raw`(?:(\s*([#][^\n]*[\n])?)*)`, $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchprogram(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchprogram(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchprogram(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<program>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}