{
  "version": 3,
  "sources": ["../src/test.ts", "../src/bugsPeg.ts", "../src/prettyPrinter.ts", "../src/Seq.ts", "../src/BUGSKit.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport { join } from 'path';\nimport * as bugs from './BUGSKit';\n\nconst testParseFile = (filepath: string) => {\n\tfs.readFile(filepath, 'utf8', (err, data) => {\n\t\tif (err) throw err;\n\t\tconst fileContent = data.toLocaleString();\n\t\tconst parseResult = bugs.parse(fileContent);\n\t\tif (parseResult.kind === 'error') {\n\t\t\tconsole.log('Parse Error', filepath)\n\t\t\tconsole.log(JSON.stringify(parseResult, null, '    '))\n\t\t\treturn;\n\t\t}\n\t\tconst program = parseResult.content;\n\t\tfunction normalize(sourceCode: string): string {\n\t\t\treturn sourceCode.replace(/[#][^\\n]*/g, '').replace(/[\\s;]/g, '')\n\t\t}\n\t\tconst before = normalize(fileContent);\n\t\tconst after = normalize(bugs.prettyPrint(program));\n\t\tif (before !== after) {\n\t\t\tconsole.log('Print Error: lost some info', filepath)\n\t\t\tlet firstDiff = 0;\n\t\t\twhile (before[firstDiff] === after[firstDiff]) {\n\t\t\t\tfirstDiff++;\n\t\t\t}\n\t\t\tconsole.log(\"From\", before.slice(firstDiff, firstDiff + 10))\n\t\t\tconsole.log(\"To  \", after.slice(firstDiff, firstDiff + 10))\n\t\t\treturn;\n\t\t}\n\t\treturn;\n\t})\n}\n\nconst pathToTestPrograms = join(__dirname, '../../testSuite');\nfs.readdir(pathToTestPrograms, (err, files) => {\n\tif (err) throw err;\n\tfor (const file of files) {\n\t\tif (file.endsWith('txt')) {\n\t\t\ttestParseFile(join(pathToTestPrograms, file));\n\t\t}\n\t}\n})\n", "/* AutoGenerated Code, changes may be overwritten\n* INPUT GRAMMAR:\n* // This grammar of the BUGS language is created with manual inspectation of the OpenBUGS manual.\n* program  := before=sep body=programBody after=sep\n* programBody := list | rectangular | sectionList\n* rectangular := header=rectangularHeader body={sep=rowSep item=rectangularBodyItem}* sep=sep footer=rectangularFooter\n* colSep := blank\n* rowSep := blank '[\\n]' | blank comment=comment\n* rectangularHeader := content={sep=colSep item=name '\\[\\]'}+\n* rectangularFooter := colSep 'END'\n* rectangularBodyItem := content={sep=colSep item=scalar}+\n* section := header=sectionHeader sep=sep body=block\n* sectionHeader := v='model' | v='data'\n* sectionList := head=section tail={sep=sep item=section}*\n* block := '{' before=relationSep body=relationList after=relationSep '}'\n* relation    := stochasticRelation | deterministicRelation | indexedRelation\n* relationSep := body={sep=blank item=relationSepItem}* blank\n* relationSepItem := sepItem | v=';'\n* relationList := head=relation tail={sep=relationSep item=relation}*\n* cti := sep header=ctiHeader '[(]' sep lower=exp? '[,]' sep upper=exp?  sep'[)]'\n* ctiHeader := v='C' | v='T' | v='I'\n* stochasticRelation      := lhs=exp beforeOp=sep '~' afterOp=sep rhs=exp cti=cti?\n* deterministicRelation   := lhs=exp beforeOp=sep '<-' afterOp=sep rhs=exp\n* indexedRelation         := 'for' blank '\\(' blank name=name blank 'in' blank domain=exp blank '\\)' afterParenR=sep body=block\n* // simple concepts\n* blank   := v='[^\\S\\n]*'\n* newline := v='[\\n]'\n* comment := '[#]' content='[^\\n]*' '[\\n]'\n* sep     := body={sep=blank item=sepItem}* blank\n* sepItem := newline | comment\n* exp  := exp5\n* exp0 := scalar | name | '\\(' before=sep exp=exp5 after=sep '\\)'\n* exp1 := base=exp0 applications=application*\n* exp2 := '-' between=sep exp=exp1 | exp1\n* exp3 := left=exp3 beforeOp=sep op=addSub afterOp=sep right=exp2 | exp2\n* exp4 := left=exp4 beforeOp=sep op=mulDiv afterOp=sep right=exp3 | exp3\n* exp5 := left=exp5 beforeOp=sep ':' afterOp=sep right=exp4 | exp4 \n* application := functionApplication | vectorApplication\n* functionApplication := beforeParen=sep '\\(' beginArgs=sep operands=argumentList endArgs=sep '\\)'\n* vectorApplication := beforeParen=sep '\\[' beginInds=sep operands=indexList endInds=sep '\\]'\n* addSub := v='\\+' | v='-'\n* mulDiv := v='\\*' | v='/'\n* listExp     := scalar | NA | structure | 'c\\(' sep operands=listExpList sep '\\)'\n* listExpList := content={first=listExp rest={sep=operandSep item=listExp}*}?\n* list        := 'list[(]' beforeFields=sep operands=fieldList afterFields=sep '[)]'\n* structure   := 'structure[(]' begin=sep '\\.' sepDotData=sep 'Data' eqData=nameValueSep data=listExp operandSep '\\.' sepDotDim=sep 'Dim' eqDim=nameValueSep dim=listExp end=sep '[)]'\n* operandSep   := before=sep ',' after=sep\n* argument     := exp\n* argumentList := content={first=argument rest={sep=operandSep item=argument}*}?\n* indexList    := content={first=exp? rest={sep=operandSep item=exp?}*}?\n* field        := name=name sep=nameValueSep value=listExp\n* fieldList    := content={first=field rest={sep=operandSep item=field}*}?\n* nameValueSep := before=sep '=' after=sep\n* name   := from=@ value='[a-zA-Z][a-zA-Z0-9._]*' to=@\n* scalar := value='-?([\\d]+([.][\\d]+)?|([\\d]+)?[.][\\d]+)([eE]-?[\\d]+)?'\n* NA     := v='NA'\n*/\ntype Nullable<T> = T | null;\ntype $$RuleType<T> = () => Nullable<T>;\ninterface ASTNodeIntf {\n    kind: ASTKinds;\n}\nexport enum ASTKinds {\n    program = \"program\",\n    programBody_1 = \"programBody_1\",\n    programBody_2 = \"programBody_2\",\n    programBody_3 = \"programBody_3\",\n    rectangular = \"rectangular\",\n    rectangular_$0 = \"rectangular_$0\",\n    colSep = \"colSep\",\n    rowSep_1 = \"rowSep_1\",\n    rowSep_2 = \"rowSep_2\",\n    rectangularHeader = \"rectangularHeader\",\n    rectangularHeader_$0 = \"rectangularHeader_$0\",\n    rectangularFooter = \"rectangularFooter\",\n    rectangularBodyItem = \"rectangularBodyItem\",\n    rectangularBodyItem_$0 = \"rectangularBodyItem_$0\",\n    section = \"section\",\n    sectionHeader_1 = \"sectionHeader_1\",\n    sectionHeader_2 = \"sectionHeader_2\",\n    sectionList = \"sectionList\",\n    sectionList_$0 = \"sectionList_$0\",\n    block = \"block\",\n    relation_1 = \"relation_1\",\n    relation_2 = \"relation_2\",\n    relation_3 = \"relation_3\",\n    relationSep = \"relationSep\",\n    relationSep_$0 = \"relationSep_$0\",\n    relationSepItem_1 = \"relationSepItem_1\",\n    relationSepItem_2 = \"relationSepItem_2\",\n    relationList = \"relationList\",\n    relationList_$0 = \"relationList_$0\",\n    cti = \"cti\",\n    ctiHeader_1 = \"ctiHeader_1\",\n    ctiHeader_2 = \"ctiHeader_2\",\n    ctiHeader_3 = \"ctiHeader_3\",\n    stochasticRelation = \"stochasticRelation\",\n    deterministicRelation = \"deterministicRelation\",\n    indexedRelation = \"indexedRelation\",\n    blank = \"blank\",\n    newline = \"newline\",\n    comment = \"comment\",\n    sep = \"sep\",\n    sep_$0 = \"sep_$0\",\n    sepItem_1 = \"sepItem_1\",\n    sepItem_2 = \"sepItem_2\",\n    exp = \"exp\",\n    exp0_1 = \"exp0_1\",\n    exp0_2 = \"exp0_2\",\n    exp0_3 = \"exp0_3\",\n    exp1 = \"exp1\",\n    exp2_1 = \"exp2_1\",\n    exp2_2 = \"exp2_2\",\n    exp3_1 = \"exp3_1\",\n    exp3_2 = \"exp3_2\",\n    exp4_1 = \"exp4_1\",\n    exp4_2 = \"exp4_2\",\n    exp5_1 = \"exp5_1\",\n    exp5_2 = \"exp5_2\",\n    application_1 = \"application_1\",\n    application_2 = \"application_2\",\n    functionApplication = \"functionApplication\",\n    vectorApplication = \"vectorApplication\",\n    addSub_1 = \"addSub_1\",\n    addSub_2 = \"addSub_2\",\n    mulDiv_1 = \"mulDiv_1\",\n    mulDiv_2 = \"mulDiv_2\",\n    listExp_1 = \"listExp_1\",\n    listExp_2 = \"listExp_2\",\n    listExp_3 = \"listExp_3\",\n    listExp_4 = \"listExp_4\",\n    listExpList = \"listExpList\",\n    listExpList_$0 = \"listExpList_$0\",\n    listExpList_$0_$0 = \"listExpList_$0_$0\",\n    list = \"list\",\n    structure = \"structure\",\n    operandSep = \"operandSep\",\n    argument = \"argument\",\n    argumentList = \"argumentList\",\n    argumentList_$0 = \"argumentList_$0\",\n    argumentList_$0_$0 = \"argumentList_$0_$0\",\n    indexList = \"indexList\",\n    indexList_$0 = \"indexList_$0\",\n    indexList_$0_$0 = \"indexList_$0_$0\",\n    field = \"field\",\n    fieldList = \"fieldList\",\n    fieldList_$0 = \"fieldList_$0\",\n    fieldList_$0_$0 = \"fieldList_$0_$0\",\n    nameValueSep = \"nameValueSep\",\n    name = \"name\",\n    scalar = \"scalar\",\n    NA = \"NA\",\n}\nexport interface program {\n    kind: ASTKinds.program;\n    before: sep;\n    body: programBody;\n    after: sep;\n}\nexport type programBody = programBody_1 | programBody_2 | programBody_3;\nexport type programBody_1 = list;\nexport type programBody_2 = rectangular;\nexport type programBody_3 = sectionList;\nexport interface rectangular {\n    kind: ASTKinds.rectangular;\n    header: rectangularHeader;\n    body: rectangular_$0[];\n    sep: sep;\n    footer: rectangularFooter;\n}\nexport interface rectangular_$0 {\n    kind: ASTKinds.rectangular_$0;\n    sep: rowSep;\n    item: rectangularBodyItem;\n}\nexport type colSep = blank;\nexport type rowSep = rowSep_1 | rowSep_2;\nexport interface rowSep_1 {\n    kind: ASTKinds.rowSep_1;\n}\nexport interface rowSep_2 {\n    kind: ASTKinds.rowSep_2;\n    comment: comment;\n}\nexport interface rectangularHeader {\n    kind: ASTKinds.rectangularHeader;\n    content: rectangularHeader_$0[];\n}\nexport interface rectangularHeader_$0 {\n    kind: ASTKinds.rectangularHeader_$0;\n    sep: colSep;\n    item: name;\n}\nexport interface rectangularFooter {\n    kind: ASTKinds.rectangularFooter;\n}\nexport interface rectangularBodyItem {\n    kind: ASTKinds.rectangularBodyItem;\n    content: rectangularBodyItem_$0[];\n}\nexport interface rectangularBodyItem_$0 {\n    kind: ASTKinds.rectangularBodyItem_$0;\n    sep: colSep;\n    item: scalar;\n}\nexport interface section {\n    kind: ASTKinds.section;\n    header: sectionHeader;\n    sep: sep;\n    body: block;\n}\nexport type sectionHeader = sectionHeader_1 | sectionHeader_2;\nexport interface sectionHeader_1 {\n    kind: ASTKinds.sectionHeader_1;\n    v: string;\n}\nexport interface sectionHeader_2 {\n    kind: ASTKinds.sectionHeader_2;\n    v: string;\n}\nexport interface sectionList {\n    kind: ASTKinds.sectionList;\n    head: section;\n    tail: sectionList_$0[];\n}\nexport interface sectionList_$0 {\n    kind: ASTKinds.sectionList_$0;\n    sep: sep;\n    item: section;\n}\nexport interface block {\n    kind: ASTKinds.block;\n    before: relationSep;\n    body: relationList;\n    after: relationSep;\n}\nexport type relation = relation_1 | relation_2 | relation_3;\nexport type relation_1 = stochasticRelation;\nexport type relation_2 = deterministicRelation;\nexport type relation_3 = indexedRelation;\nexport interface relationSep {\n    kind: ASTKinds.relationSep;\n    body: relationSep_$0[];\n}\nexport interface relationSep_$0 {\n    kind: ASTKinds.relationSep_$0;\n    sep: blank;\n    item: relationSepItem;\n}\nexport type relationSepItem = relationSepItem_1 | relationSepItem_2;\nexport type relationSepItem_1 = sepItem;\nexport interface relationSepItem_2 {\n    kind: ASTKinds.relationSepItem_2;\n    v: string;\n}\nexport interface relationList {\n    kind: ASTKinds.relationList;\n    head: relation;\n    tail: relationList_$0[];\n}\nexport interface relationList_$0 {\n    kind: ASTKinds.relationList_$0;\n    sep: relationSep;\n    item: relation;\n}\nexport interface cti {\n    kind: ASTKinds.cti;\n    header: ctiHeader;\n    lower: Nullable<exp>;\n    upper: Nullable<exp>;\n}\nexport type ctiHeader = ctiHeader_1 | ctiHeader_2 | ctiHeader_3;\nexport interface ctiHeader_1 {\n    kind: ASTKinds.ctiHeader_1;\n    v: string;\n}\nexport interface ctiHeader_2 {\n    kind: ASTKinds.ctiHeader_2;\n    v: string;\n}\nexport interface ctiHeader_3 {\n    kind: ASTKinds.ctiHeader_3;\n    v: string;\n}\nexport interface stochasticRelation {\n    kind: ASTKinds.stochasticRelation;\n    lhs: exp;\n    beforeOp: sep;\n    afterOp: sep;\n    rhs: exp;\n    cti: Nullable<cti>;\n}\nexport interface deterministicRelation {\n    kind: ASTKinds.deterministicRelation;\n    lhs: exp;\n    beforeOp: sep;\n    afterOp: sep;\n    rhs: exp;\n}\nexport interface indexedRelation {\n    kind: ASTKinds.indexedRelation;\n    name: name;\n    domain: exp;\n    afterParenR: sep;\n    body: block;\n}\nexport interface blank {\n    kind: ASTKinds.blank;\n    v: string;\n}\nexport interface newline {\n    kind: ASTKinds.newline;\n    v: string;\n}\nexport interface comment {\n    kind: ASTKinds.comment;\n    content: string;\n}\nexport interface sep {\n    kind: ASTKinds.sep;\n    body: sep_$0[];\n}\nexport interface sep_$0 {\n    kind: ASTKinds.sep_$0;\n    sep: blank;\n    item: sepItem;\n}\nexport type sepItem = sepItem_1 | sepItem_2;\nexport type sepItem_1 = newline;\nexport type sepItem_2 = comment;\nexport type exp = exp5;\nexport type exp0 = exp0_1 | exp0_2 | exp0_3;\nexport type exp0_1 = scalar;\nexport type exp0_2 = name;\nexport interface exp0_3 {\n    kind: ASTKinds.exp0_3;\n    before: sep;\n    exp: exp5;\n    after: sep;\n}\nexport interface exp1 {\n    kind: ASTKinds.exp1;\n    base: exp0;\n    applications: application[];\n}\nexport type exp2 = exp2_1 | exp2_2;\nexport interface exp2_1 {\n    kind: ASTKinds.exp2_1;\n    between: sep;\n    exp: exp1;\n}\nexport type exp2_2 = exp1;\nexport type exp3 = exp3_1 | exp3_2;\nexport interface exp3_1 {\n    kind: ASTKinds.exp3_1;\n    left: exp3;\n    beforeOp: sep;\n    op: addSub;\n    afterOp: sep;\n    right: exp2;\n}\nexport type exp3_2 = exp2;\nexport type exp4 = exp4_1 | exp4_2;\nexport interface exp4_1 {\n    kind: ASTKinds.exp4_1;\n    left: exp4;\n    beforeOp: sep;\n    op: mulDiv;\n    afterOp: sep;\n    right: exp3;\n}\nexport type exp4_2 = exp3;\nexport type exp5 = exp5_1 | exp5_2;\nexport interface exp5_1 {\n    kind: ASTKinds.exp5_1;\n    left: exp5;\n    beforeOp: sep;\n    afterOp: sep;\n    right: exp4;\n}\nexport type exp5_2 = exp4;\nexport type application = application_1 | application_2;\nexport type application_1 = functionApplication;\nexport type application_2 = vectorApplication;\nexport interface functionApplication {\n    kind: ASTKinds.functionApplication;\n    beforeParen: sep;\n    beginArgs: sep;\n    operands: argumentList;\n    endArgs: sep;\n}\nexport interface vectorApplication {\n    kind: ASTKinds.vectorApplication;\n    beforeParen: sep;\n    beginInds: sep;\n    operands: indexList;\n    endInds: sep;\n}\nexport type addSub = addSub_1 | addSub_2;\nexport interface addSub_1 {\n    kind: ASTKinds.addSub_1;\n    v: string;\n}\nexport interface addSub_2 {\n    kind: ASTKinds.addSub_2;\n    v: string;\n}\nexport type mulDiv = mulDiv_1 | mulDiv_2;\nexport interface mulDiv_1 {\n    kind: ASTKinds.mulDiv_1;\n    v: string;\n}\nexport interface mulDiv_2 {\n    kind: ASTKinds.mulDiv_2;\n    v: string;\n}\nexport type listExp = listExp_1 | listExp_2 | listExp_3 | listExp_4;\nexport type listExp_1 = scalar;\nexport type listExp_2 = NA;\nexport type listExp_3 = structure;\nexport interface listExp_4 {\n    kind: ASTKinds.listExp_4;\n    operands: listExpList;\n}\nexport interface listExpList {\n    kind: ASTKinds.listExpList;\n    content: Nullable<listExpList_$0>;\n}\nexport interface listExpList_$0 {\n    kind: ASTKinds.listExpList_$0;\n    first: listExp;\n    rest: listExpList_$0_$0[];\n}\nexport interface listExpList_$0_$0 {\n    kind: ASTKinds.listExpList_$0_$0;\n    sep: operandSep;\n    item: listExp;\n}\nexport interface list {\n    kind: ASTKinds.list;\n    beforeFields: sep;\n    operands: fieldList;\n    afterFields: sep;\n}\nexport interface structure {\n    kind: ASTKinds.structure;\n    begin: sep;\n    sepDotData: sep;\n    eqData: nameValueSep;\n    data: listExp;\n    sepDotDim: sep;\n    eqDim: nameValueSep;\n    dim: listExp;\n    end: sep;\n}\nexport interface operandSep {\n    kind: ASTKinds.operandSep;\n    before: sep;\n    after: sep;\n}\nexport type argument = exp;\nexport interface argumentList {\n    kind: ASTKinds.argumentList;\n    content: Nullable<argumentList_$0>;\n}\nexport interface argumentList_$0 {\n    kind: ASTKinds.argumentList_$0;\n    first: argument;\n    rest: argumentList_$0_$0[];\n}\nexport interface argumentList_$0_$0 {\n    kind: ASTKinds.argumentList_$0_$0;\n    sep: operandSep;\n    item: argument;\n}\nexport interface indexList {\n    kind: ASTKinds.indexList;\n    content: Nullable<indexList_$0>;\n}\nexport interface indexList_$0 {\n    kind: ASTKinds.indexList_$0;\n    first: Nullable<exp>;\n    rest: indexList_$0_$0[];\n}\nexport interface indexList_$0_$0 {\n    kind: ASTKinds.indexList_$0_$0;\n    sep: operandSep;\n    item: Nullable<exp>;\n}\nexport interface field {\n    kind: ASTKinds.field;\n    name: name;\n    sep: nameValueSep;\n    value: listExp;\n}\nexport interface fieldList {\n    kind: ASTKinds.fieldList;\n    content: Nullable<fieldList_$0>;\n}\nexport interface fieldList_$0 {\n    kind: ASTKinds.fieldList_$0;\n    first: field;\n    rest: fieldList_$0_$0[];\n}\nexport interface fieldList_$0_$0 {\n    kind: ASTKinds.fieldList_$0_$0;\n    sep: operandSep;\n    item: field;\n}\nexport interface nameValueSep {\n    kind: ASTKinds.nameValueSep;\n    before: sep;\n    after: sep;\n}\nexport interface name {\n    kind: ASTKinds.name;\n    from: PosInfo;\n    value: string;\n    to: PosInfo;\n}\nexport interface scalar {\n    kind: ASTKinds.scalar;\n    value: string;\n}\nexport interface NA {\n    kind: ASTKinds.NA;\n    v: string;\n}\nexport class Parser {\n    private readonly input: string;\n    private pos: PosInfo;\n    private negating: boolean = false;\n    private memoSafe: boolean = true;\n    constructor(input: string) {\n        this.pos = {overallPos: 0, line: 1, offset: 0};\n        this.input = input;\n    }\n    public reset(pos: PosInfo) {\n        this.pos = pos;\n    }\n    public finished(): boolean {\n        return this.pos.overallPos === this.input.length;\n    }\n    public clearMemos(): void {\n        this.$scope$exp3$memo.clear();\n        this.$scope$exp4$memo.clear();\n        this.$scope$exp5$memo.clear();\n    }\n    protected $scope$exp3$memo: Map<number, [Nullable<exp3>, PosInfo]> = new Map();\n    protected $scope$exp4$memo: Map<number, [Nullable<exp4>, PosInfo]> = new Map();\n    protected $scope$exp5$memo: Map<number, [Nullable<exp5>, PosInfo]> = new Map();\n    public matchprogram($$dpth: number, $$cr?: ErrorTracker): Nullable<program> {\n        return this.run<program>($$dpth,\n            () => {\n                let $scope$before: Nullable<sep>;\n                let $scope$body: Nullable<programBody>;\n                let $scope$after: Nullable<sep>;\n                let $$res: Nullable<program> = null;\n                if (true\n                    && ($scope$before = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && ($scope$body = this.matchprogramBody($$dpth + 1, $$cr)) !== null\n                    && ($scope$after = this.matchsep($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.program, before: $scope$before, body: $scope$body, after: $scope$after};\n                }\n                return $$res;\n            });\n    }\n    public matchprogramBody($$dpth: number, $$cr?: ErrorTracker): Nullable<programBody> {\n        return this.choice<programBody>([\n            () => this.matchprogramBody_1($$dpth + 1, $$cr),\n            () => this.matchprogramBody_2($$dpth + 1, $$cr),\n            () => this.matchprogramBody_3($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchprogramBody_1($$dpth: number, $$cr?: ErrorTracker): Nullable<programBody_1> {\n        return this.matchlist($$dpth + 1, $$cr);\n    }\n    public matchprogramBody_2($$dpth: number, $$cr?: ErrorTracker): Nullable<programBody_2> {\n        return this.matchrectangular($$dpth + 1, $$cr);\n    }\n    public matchprogramBody_3($$dpth: number, $$cr?: ErrorTracker): Nullable<programBody_3> {\n        return this.matchsectionList($$dpth + 1, $$cr);\n    }\n    public matchrectangular($$dpth: number, $$cr?: ErrorTracker): Nullable<rectangular> {\n        return this.run<rectangular>($$dpth,\n            () => {\n                let $scope$header: Nullable<rectangularHeader>;\n                let $scope$body: Nullable<rectangular_$0[]>;\n                let $scope$sep: Nullable<sep>;\n                let $scope$footer: Nullable<rectangularFooter>;\n                let $$res: Nullable<rectangular> = null;\n                if (true\n                    && ($scope$header = this.matchrectangularHeader($$dpth + 1, $$cr)) !== null\n                    && ($scope$body = this.loop<rectangular_$0>(() => this.matchrectangular_$0($$dpth + 1, $$cr), true)) !== null\n                    && ($scope$sep = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && ($scope$footer = this.matchrectangularFooter($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.rectangular, header: $scope$header, body: $scope$body, sep: $scope$sep, footer: $scope$footer};\n                }\n                return $$res;\n            });\n    }\n    public matchrectangular_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<rectangular_$0> {\n        return this.run<rectangular_$0>($$dpth,\n            () => {\n                let $scope$sep: Nullable<rowSep>;\n                let $scope$item: Nullable<rectangularBodyItem>;\n                let $$res: Nullable<rectangular_$0> = null;\n                if (true\n                    && ($scope$sep = this.matchrowSep($$dpth + 1, $$cr)) !== null\n                    && ($scope$item = this.matchrectangularBodyItem($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.rectangular_$0, sep: $scope$sep, item: $scope$item};\n                }\n                return $$res;\n            });\n    }\n    public matchcolSep($$dpth: number, $$cr?: ErrorTracker): Nullable<colSep> {\n        return this.matchblank($$dpth + 1, $$cr);\n    }\n    public matchrowSep($$dpth: number, $$cr?: ErrorTracker): Nullable<rowSep> {\n        return this.choice<rowSep>([\n            () => this.matchrowSep_1($$dpth + 1, $$cr),\n            () => this.matchrowSep_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchrowSep_1($$dpth: number, $$cr?: ErrorTracker): Nullable<rowSep_1> {\n        return this.run<rowSep_1>($$dpth,\n            () => {\n                let $$res: Nullable<rowSep_1> = null;\n                if (true\n                    && this.matchblank($$dpth + 1, $$cr) !== null\n                    && this.regexAccept(String.raw`(?:[\\n])`, $$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.rowSep_1, };\n                }\n                return $$res;\n            });\n    }\n    public matchrowSep_2($$dpth: number, $$cr?: ErrorTracker): Nullable<rowSep_2> {\n        return this.run<rowSep_2>($$dpth,\n            () => {\n                let $scope$comment: Nullable<comment>;\n                let $$res: Nullable<rowSep_2> = null;\n                if (true\n                    && this.matchblank($$dpth + 1, $$cr) !== null\n                    && ($scope$comment = this.matchcomment($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.rowSep_2, comment: $scope$comment};\n                }\n                return $$res;\n            });\n    }\n    public matchrectangularHeader($$dpth: number, $$cr?: ErrorTracker): Nullable<rectangularHeader> {\n        return this.run<rectangularHeader>($$dpth,\n            () => {\n                let $scope$content: Nullable<rectangularHeader_$0[]>;\n                let $$res: Nullable<rectangularHeader> = null;\n                if (true\n                    && ($scope$content = this.loop<rectangularHeader_$0>(() => this.matchrectangularHeader_$0($$dpth + 1, $$cr), false)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.rectangularHeader, content: $scope$content};\n                }\n                return $$res;\n            });\n    }\n    public matchrectangularHeader_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<rectangularHeader_$0> {\n        return this.run<rectangularHeader_$0>($$dpth,\n            () => {\n                let $scope$sep: Nullable<colSep>;\n                let $scope$item: Nullable<name>;\n                let $$res: Nullable<rectangularHeader_$0> = null;\n                if (true\n                    && ($scope$sep = this.matchcolSep($$dpth + 1, $$cr)) !== null\n                    && ($scope$item = this.matchname($$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?:\\[\\])`, $$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.rectangularHeader_$0, sep: $scope$sep, item: $scope$item};\n                }\n                return $$res;\n            });\n    }\n    public matchrectangularFooter($$dpth: number, $$cr?: ErrorTracker): Nullable<rectangularFooter> {\n        return this.run<rectangularFooter>($$dpth,\n            () => {\n                let $$res: Nullable<rectangularFooter> = null;\n                if (true\n                    && this.matchcolSep($$dpth + 1, $$cr) !== null\n                    && this.regexAccept(String.raw`(?:END)`, $$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.rectangularFooter, };\n                }\n                return $$res;\n            });\n    }\n    public matchrectangularBodyItem($$dpth: number, $$cr?: ErrorTracker): Nullable<rectangularBodyItem> {\n        return this.run<rectangularBodyItem>($$dpth,\n            () => {\n                let $scope$content: Nullable<rectangularBodyItem_$0[]>;\n                let $$res: Nullable<rectangularBodyItem> = null;\n                if (true\n                    && ($scope$content = this.loop<rectangularBodyItem_$0>(() => this.matchrectangularBodyItem_$0($$dpth + 1, $$cr), false)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.rectangularBodyItem, content: $scope$content};\n                }\n                return $$res;\n            });\n    }\n    public matchrectangularBodyItem_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<rectangularBodyItem_$0> {\n        return this.run<rectangularBodyItem_$0>($$dpth,\n            () => {\n                let $scope$sep: Nullable<colSep>;\n                let $scope$item: Nullable<scalar>;\n                let $$res: Nullable<rectangularBodyItem_$0> = null;\n                if (true\n                    && ($scope$sep = this.matchcolSep($$dpth + 1, $$cr)) !== null\n                    && ($scope$item = this.matchscalar($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.rectangularBodyItem_$0, sep: $scope$sep, item: $scope$item};\n                }\n                return $$res;\n            });\n    }\n    public matchsection($$dpth: number, $$cr?: ErrorTracker): Nullable<section> {\n        return this.run<section>($$dpth,\n            () => {\n                let $scope$header: Nullable<sectionHeader>;\n                let $scope$sep: Nullable<sep>;\n                let $scope$body: Nullable<block>;\n                let $$res: Nullable<section> = null;\n                if (true\n                    && ($scope$header = this.matchsectionHeader($$dpth + 1, $$cr)) !== null\n                    && ($scope$sep = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && ($scope$body = this.matchblock($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.section, header: $scope$header, sep: $scope$sep, body: $scope$body};\n                }\n                return $$res;\n            });\n    }\n    public matchsectionHeader($$dpth: number, $$cr?: ErrorTracker): Nullable<sectionHeader> {\n        return this.choice<sectionHeader>([\n            () => this.matchsectionHeader_1($$dpth + 1, $$cr),\n            () => this.matchsectionHeader_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchsectionHeader_1($$dpth: number, $$cr?: ErrorTracker): Nullable<sectionHeader_1> {\n        return this.run<sectionHeader_1>($$dpth,\n            () => {\n                let $scope$v: Nullable<string>;\n                let $$res: Nullable<sectionHeader_1> = null;\n                if (true\n                    && ($scope$v = this.regexAccept(String.raw`(?:model)`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.sectionHeader_1, v: $scope$v};\n                }\n                return $$res;\n            });\n    }\n    public matchsectionHeader_2($$dpth: number, $$cr?: ErrorTracker): Nullable<sectionHeader_2> {\n        return this.run<sectionHeader_2>($$dpth,\n            () => {\n                let $scope$v: Nullable<string>;\n                let $$res: Nullable<sectionHeader_2> = null;\n                if (true\n                    && ($scope$v = this.regexAccept(String.raw`(?:data)`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.sectionHeader_2, v: $scope$v};\n                }\n                return $$res;\n            });\n    }\n    public matchsectionList($$dpth: number, $$cr?: ErrorTracker): Nullable<sectionList> {\n        return this.run<sectionList>($$dpth,\n            () => {\n                let $scope$head: Nullable<section>;\n                let $scope$tail: Nullable<sectionList_$0[]>;\n                let $$res: Nullable<sectionList> = null;\n                if (true\n                    && ($scope$head = this.matchsection($$dpth + 1, $$cr)) !== null\n                    && ($scope$tail = this.loop<sectionList_$0>(() => this.matchsectionList_$0($$dpth + 1, $$cr), true)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.sectionList, head: $scope$head, tail: $scope$tail};\n                }\n                return $$res;\n            });\n    }\n    public matchsectionList_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<sectionList_$0> {\n        return this.run<sectionList_$0>($$dpth,\n            () => {\n                let $scope$sep: Nullable<sep>;\n                let $scope$item: Nullable<section>;\n                let $$res: Nullable<sectionList_$0> = null;\n                if (true\n                    && ($scope$sep = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && ($scope$item = this.matchsection($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.sectionList_$0, sep: $scope$sep, item: $scope$item};\n                }\n                return $$res;\n            });\n    }\n    public matchblock($$dpth: number, $$cr?: ErrorTracker): Nullable<block> {\n        return this.run<block>($$dpth,\n            () => {\n                let $scope$before: Nullable<relationSep>;\n                let $scope$body: Nullable<relationList>;\n                let $scope$after: Nullable<relationSep>;\n                let $$res: Nullable<block> = null;\n                if (true\n                    && this.regexAccept(String.raw`(?:{)`, $$dpth + 1, $$cr) !== null\n                    && ($scope$before = this.matchrelationSep($$dpth + 1, $$cr)) !== null\n                    && ($scope$body = this.matchrelationList($$dpth + 1, $$cr)) !== null\n                    && ($scope$after = this.matchrelationSep($$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.block, before: $scope$before, body: $scope$body, after: $scope$after};\n                }\n                return $$res;\n            });\n    }\n    public matchrelation($$dpth: number, $$cr?: ErrorTracker): Nullable<relation> {\n        return this.choice<relation>([\n            () => this.matchrelation_1($$dpth + 1, $$cr),\n            () => this.matchrelation_2($$dpth + 1, $$cr),\n            () => this.matchrelation_3($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchrelation_1($$dpth: number, $$cr?: ErrorTracker): Nullable<relation_1> {\n        return this.matchstochasticRelation($$dpth + 1, $$cr);\n    }\n    public matchrelation_2($$dpth: number, $$cr?: ErrorTracker): Nullable<relation_2> {\n        return this.matchdeterministicRelation($$dpth + 1, $$cr);\n    }\n    public matchrelation_3($$dpth: number, $$cr?: ErrorTracker): Nullable<relation_3> {\n        return this.matchindexedRelation($$dpth + 1, $$cr);\n    }\n    public matchrelationSep($$dpth: number, $$cr?: ErrorTracker): Nullable<relationSep> {\n        return this.run<relationSep>($$dpth,\n            () => {\n                let $scope$body: Nullable<relationSep_$0[]>;\n                let $$res: Nullable<relationSep> = null;\n                if (true\n                    && ($scope$body = this.loop<relationSep_$0>(() => this.matchrelationSep_$0($$dpth + 1, $$cr), true)) !== null\n                    && this.matchblank($$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.relationSep, body: $scope$body};\n                }\n                return $$res;\n            });\n    }\n    public matchrelationSep_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<relationSep_$0> {\n        return this.run<relationSep_$0>($$dpth,\n            () => {\n                let $scope$sep: Nullable<blank>;\n                let $scope$item: Nullable<relationSepItem>;\n                let $$res: Nullable<relationSep_$0> = null;\n                if (true\n                    && ($scope$sep = this.matchblank($$dpth + 1, $$cr)) !== null\n                    && ($scope$item = this.matchrelationSepItem($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.relationSep_$0, sep: $scope$sep, item: $scope$item};\n                }\n                return $$res;\n            });\n    }\n    public matchrelationSepItem($$dpth: number, $$cr?: ErrorTracker): Nullable<relationSepItem> {\n        return this.choice<relationSepItem>([\n            () => this.matchrelationSepItem_1($$dpth + 1, $$cr),\n            () => this.matchrelationSepItem_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchrelationSepItem_1($$dpth: number, $$cr?: ErrorTracker): Nullable<relationSepItem_1> {\n        return this.matchsepItem($$dpth + 1, $$cr);\n    }\n    public matchrelationSepItem_2($$dpth: number, $$cr?: ErrorTracker): Nullable<relationSepItem_2> {\n        return this.run<relationSepItem_2>($$dpth,\n            () => {\n                let $scope$v: Nullable<string>;\n                let $$res: Nullable<relationSepItem_2> = null;\n                if (true\n                    && ($scope$v = this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.relationSepItem_2, v: $scope$v};\n                }\n                return $$res;\n            });\n    }\n    public matchrelationList($$dpth: number, $$cr?: ErrorTracker): Nullable<relationList> {\n        return this.run<relationList>($$dpth,\n            () => {\n                let $scope$head: Nullable<relation>;\n                let $scope$tail: Nullable<relationList_$0[]>;\n                let $$res: Nullable<relationList> = null;\n                if (true\n                    && ($scope$head = this.matchrelation($$dpth + 1, $$cr)) !== null\n                    && ($scope$tail = this.loop<relationList_$0>(() => this.matchrelationList_$0($$dpth + 1, $$cr), true)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.relationList, head: $scope$head, tail: $scope$tail};\n                }\n                return $$res;\n            });\n    }\n    public matchrelationList_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<relationList_$0> {\n        return this.run<relationList_$0>($$dpth,\n            () => {\n                let $scope$sep: Nullable<relationSep>;\n                let $scope$item: Nullable<relation>;\n                let $$res: Nullable<relationList_$0> = null;\n                if (true\n                    && ($scope$sep = this.matchrelationSep($$dpth + 1, $$cr)) !== null\n                    && ($scope$item = this.matchrelation($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.relationList_$0, sep: $scope$sep, item: $scope$item};\n                }\n                return $$res;\n            });\n    }\n    public matchcti($$dpth: number, $$cr?: ErrorTracker): Nullable<cti> {\n        return this.run<cti>($$dpth,\n            () => {\n                let $scope$header: Nullable<ctiHeader>;\n                let $scope$lower: Nullable<Nullable<exp>>;\n                let $scope$upper: Nullable<Nullable<exp>>;\n                let $$res: Nullable<cti> = null;\n                if (true\n                    && this.matchsep($$dpth + 1, $$cr) !== null\n                    && ($scope$header = this.matchctiHeader($$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?:[(])`, $$dpth + 1, $$cr) !== null\n                    && this.matchsep($$dpth + 1, $$cr) !== null\n                    && (($scope$lower = this.matchexp($$dpth + 1, $$cr)) || true)\n                    && this.regexAccept(String.raw`(?:[,])`, $$dpth + 1, $$cr) !== null\n                    && this.matchsep($$dpth + 1, $$cr) !== null\n                    && (($scope$upper = this.matchexp($$dpth + 1, $$cr)) || true)\n                    && this.matchsep($$dpth + 1, $$cr) !== null\n                    && this.regexAccept(String.raw`(?:[)])`, $$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.cti, header: $scope$header, lower: $scope$lower, upper: $scope$upper};\n                }\n                return $$res;\n            });\n    }\n    public matchctiHeader($$dpth: number, $$cr?: ErrorTracker): Nullable<ctiHeader> {\n        return this.choice<ctiHeader>([\n            () => this.matchctiHeader_1($$dpth + 1, $$cr),\n            () => this.matchctiHeader_2($$dpth + 1, $$cr),\n            () => this.matchctiHeader_3($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchctiHeader_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ctiHeader_1> {\n        return this.run<ctiHeader_1>($$dpth,\n            () => {\n                let $scope$v: Nullable<string>;\n                let $$res: Nullable<ctiHeader_1> = null;\n                if (true\n                    && ($scope$v = this.regexAccept(String.raw`(?:C)`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.ctiHeader_1, v: $scope$v};\n                }\n                return $$res;\n            });\n    }\n    public matchctiHeader_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ctiHeader_2> {\n        return this.run<ctiHeader_2>($$dpth,\n            () => {\n                let $scope$v: Nullable<string>;\n                let $$res: Nullable<ctiHeader_2> = null;\n                if (true\n                    && ($scope$v = this.regexAccept(String.raw`(?:T)`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.ctiHeader_2, v: $scope$v};\n                }\n                return $$res;\n            });\n    }\n    public matchctiHeader_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ctiHeader_3> {\n        return this.run<ctiHeader_3>($$dpth,\n            () => {\n                let $scope$v: Nullable<string>;\n                let $$res: Nullable<ctiHeader_3> = null;\n                if (true\n                    && ($scope$v = this.regexAccept(String.raw`(?:I)`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.ctiHeader_3, v: $scope$v};\n                }\n                return $$res;\n            });\n    }\n    public matchstochasticRelation($$dpth: number, $$cr?: ErrorTracker): Nullable<stochasticRelation> {\n        return this.run<stochasticRelation>($$dpth,\n            () => {\n                let $scope$lhs: Nullable<exp>;\n                let $scope$beforeOp: Nullable<sep>;\n                let $scope$afterOp: Nullable<sep>;\n                let $scope$rhs: Nullable<exp>;\n                let $scope$cti: Nullable<Nullable<cti>>;\n                let $$res: Nullable<stochasticRelation> = null;\n                if (true\n                    && ($scope$lhs = this.matchexp($$dpth + 1, $$cr)) !== null\n                    && ($scope$beforeOp = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?:~)`, $$dpth + 1, $$cr) !== null\n                    && ($scope$afterOp = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && ($scope$rhs = this.matchexp($$dpth + 1, $$cr)) !== null\n                    && (($scope$cti = this.matchcti($$dpth + 1, $$cr)) || true)\n                ) {\n                    $$res = {kind: ASTKinds.stochasticRelation, lhs: $scope$lhs, beforeOp: $scope$beforeOp, afterOp: $scope$afterOp, rhs: $scope$rhs, cti: $scope$cti};\n                }\n                return $$res;\n            });\n    }\n    public matchdeterministicRelation($$dpth: number, $$cr?: ErrorTracker): Nullable<deterministicRelation> {\n        return this.run<deterministicRelation>($$dpth,\n            () => {\n                let $scope$lhs: Nullable<exp>;\n                let $scope$beforeOp: Nullable<sep>;\n                let $scope$afterOp: Nullable<sep>;\n                let $scope$rhs: Nullable<exp>;\n                let $$res: Nullable<deterministicRelation> = null;\n                if (true\n                    && ($scope$lhs = this.matchexp($$dpth + 1, $$cr)) !== null\n                    && ($scope$beforeOp = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?:<-)`, $$dpth + 1, $$cr) !== null\n                    && ($scope$afterOp = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && ($scope$rhs = this.matchexp($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.deterministicRelation, lhs: $scope$lhs, beforeOp: $scope$beforeOp, afterOp: $scope$afterOp, rhs: $scope$rhs};\n                }\n                return $$res;\n            });\n    }\n    public matchindexedRelation($$dpth: number, $$cr?: ErrorTracker): Nullable<indexedRelation> {\n        return this.run<indexedRelation>($$dpth,\n            () => {\n                let $scope$name: Nullable<name>;\n                let $scope$domain: Nullable<exp>;\n                let $scope$afterParenR: Nullable<sep>;\n                let $scope$body: Nullable<block>;\n                let $$res: Nullable<indexedRelation> = null;\n                if (true\n                    && this.regexAccept(String.raw`(?:for)`, $$dpth + 1, $$cr) !== null\n                    && this.matchblank($$dpth + 1, $$cr) !== null\n                    && this.regexAccept(String.raw`(?:\\()`, $$dpth + 1, $$cr) !== null\n                    && this.matchblank($$dpth + 1, $$cr) !== null\n                    && ($scope$name = this.matchname($$dpth + 1, $$cr)) !== null\n                    && this.matchblank($$dpth + 1, $$cr) !== null\n                    && this.regexAccept(String.raw`(?:in)`, $$dpth + 1, $$cr) !== null\n                    && this.matchblank($$dpth + 1, $$cr) !== null\n                    && ($scope$domain = this.matchexp($$dpth + 1, $$cr)) !== null\n                    && this.matchblank($$dpth + 1, $$cr) !== null\n                    && this.regexAccept(String.raw`(?:\\))`, $$dpth + 1, $$cr) !== null\n                    && ($scope$afterParenR = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && ($scope$body = this.matchblock($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.indexedRelation, name: $scope$name, domain: $scope$domain, afterParenR: $scope$afterParenR, body: $scope$body};\n                }\n                return $$res;\n            });\n    }\n    public matchblank($$dpth: number, $$cr?: ErrorTracker): Nullable<blank> {\n        return this.run<blank>($$dpth,\n            () => {\n                let $scope$v: Nullable<string>;\n                let $$res: Nullable<blank> = null;\n                if (true\n                    && ($scope$v = this.regexAccept(String.raw`(?:[^\\S\\n]*)`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.blank, v: $scope$v};\n                }\n                return $$res;\n            });\n    }\n    public matchnewline($$dpth: number, $$cr?: ErrorTracker): Nullable<newline> {\n        return this.run<newline>($$dpth,\n            () => {\n                let $scope$v: Nullable<string>;\n                let $$res: Nullable<newline> = null;\n                if (true\n                    && ($scope$v = this.regexAccept(String.raw`(?:[\\n])`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.newline, v: $scope$v};\n                }\n                return $$res;\n            });\n    }\n    public matchcomment($$dpth: number, $$cr?: ErrorTracker): Nullable<comment> {\n        return this.run<comment>($$dpth,\n            () => {\n                let $scope$content: Nullable<string>;\n                let $$res: Nullable<comment> = null;\n                if (true\n                    && this.regexAccept(String.raw`(?:[#])`, $$dpth + 1, $$cr) !== null\n                    && ($scope$content = this.regexAccept(String.raw`(?:[^\\n]*)`, $$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?:[\\n])`, $$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.comment, content: $scope$content};\n                }\n                return $$res;\n            });\n    }\n    public matchsep($$dpth: number, $$cr?: ErrorTracker): Nullable<sep> {\n        return this.run<sep>($$dpth,\n            () => {\n                let $scope$body: Nullable<sep_$0[]>;\n                let $$res: Nullable<sep> = null;\n                if (true\n                    && ($scope$body = this.loop<sep_$0>(() => this.matchsep_$0($$dpth + 1, $$cr), true)) !== null\n                    && this.matchblank($$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.sep, body: $scope$body};\n                }\n                return $$res;\n            });\n    }\n    public matchsep_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<sep_$0> {\n        return this.run<sep_$0>($$dpth,\n            () => {\n                let $scope$sep: Nullable<blank>;\n                let $scope$item: Nullable<sepItem>;\n                let $$res: Nullable<sep_$0> = null;\n                if (true\n                    && ($scope$sep = this.matchblank($$dpth + 1, $$cr)) !== null\n                    && ($scope$item = this.matchsepItem($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.sep_$0, sep: $scope$sep, item: $scope$item};\n                }\n                return $$res;\n            });\n    }\n    public matchsepItem($$dpth: number, $$cr?: ErrorTracker): Nullable<sepItem> {\n        return this.choice<sepItem>([\n            () => this.matchsepItem_1($$dpth + 1, $$cr),\n            () => this.matchsepItem_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchsepItem_1($$dpth: number, $$cr?: ErrorTracker): Nullable<sepItem_1> {\n        return this.matchnewline($$dpth + 1, $$cr);\n    }\n    public matchsepItem_2($$dpth: number, $$cr?: ErrorTracker): Nullable<sepItem_2> {\n        return this.matchcomment($$dpth + 1, $$cr);\n    }\n    public matchexp($$dpth: number, $$cr?: ErrorTracker): Nullable<exp> {\n        return this.matchexp5($$dpth + 1, $$cr);\n    }\n    public matchexp0($$dpth: number, $$cr?: ErrorTracker): Nullable<exp0> {\n        return this.choice<exp0>([\n            () => this.matchexp0_1($$dpth + 1, $$cr),\n            () => this.matchexp0_2($$dpth + 1, $$cr),\n            () => this.matchexp0_3($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchexp0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<exp0_1> {\n        return this.matchscalar($$dpth + 1, $$cr);\n    }\n    public matchexp0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<exp0_2> {\n        return this.matchname($$dpth + 1, $$cr);\n    }\n    public matchexp0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<exp0_3> {\n        return this.run<exp0_3>($$dpth,\n            () => {\n                let $scope$before: Nullable<sep>;\n                let $scope$exp: Nullable<exp5>;\n                let $scope$after: Nullable<sep>;\n                let $$res: Nullable<exp0_3> = null;\n                if (true\n                    && this.regexAccept(String.raw`(?:\\()`, $$dpth + 1, $$cr) !== null\n                    && ($scope$before = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && ($scope$exp = this.matchexp5($$dpth + 1, $$cr)) !== null\n                    && ($scope$after = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?:\\))`, $$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.exp0_3, before: $scope$before, exp: $scope$exp, after: $scope$after};\n                }\n                return $$res;\n            });\n    }\n    public matchexp1($$dpth: number, $$cr?: ErrorTracker): Nullable<exp1> {\n        return this.run<exp1>($$dpth,\n            () => {\n                let $scope$base: Nullable<exp0>;\n                let $scope$applications: Nullable<application[]>;\n                let $$res: Nullable<exp1> = null;\n                if (true\n                    && ($scope$base = this.matchexp0($$dpth + 1, $$cr)) !== null\n                    && ($scope$applications = this.loop<application>(() => this.matchapplication($$dpth + 1, $$cr), true)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.exp1, base: $scope$base, applications: $scope$applications};\n                }\n                return $$res;\n            });\n    }\n    public matchexp2($$dpth: number, $$cr?: ErrorTracker): Nullable<exp2> {\n        return this.choice<exp2>([\n            () => this.matchexp2_1($$dpth + 1, $$cr),\n            () => this.matchexp2_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchexp2_1($$dpth: number, $$cr?: ErrorTracker): Nullable<exp2_1> {\n        return this.run<exp2_1>($$dpth,\n            () => {\n                let $scope$between: Nullable<sep>;\n                let $scope$exp: Nullable<exp1>;\n                let $$res: Nullable<exp2_1> = null;\n                if (true\n                    && this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr) !== null\n                    && ($scope$between = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && ($scope$exp = this.matchexp1($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.exp2_1, between: $scope$between, exp: $scope$exp};\n                }\n                return $$res;\n            });\n    }\n    public matchexp2_2($$dpth: number, $$cr?: ErrorTracker): Nullable<exp2_2> {\n        return this.matchexp1($$dpth + 1, $$cr);\n    }\n    public matchexp3($$dpth: number, $$cr?: ErrorTracker): Nullable<exp3> {\n        const fn = () => {\n            return this.choice<exp3>([\n                () => this.matchexp3_1($$dpth + 1, $$cr),\n                () => this.matchexp3_2($$dpth + 1, $$cr),\n            ]);\n        };\n        const $scope$pos = this.mark();\n        const memo = this.$scope$exp3$memo.get($scope$pos.overallPos);\n        if(memo !== undefined) {\n            this.reset(memo[1]);\n            return memo[0];\n        }\n        const $scope$oldMemoSafe = this.memoSafe;\n        this.memoSafe = false;\n        this.$scope$exp3$memo.set($scope$pos.overallPos, [null, $scope$pos]);\n        let lastRes: Nullable<exp3> = null;\n        let lastPos: PosInfo = $scope$pos;\n        for(;;) {\n            this.reset($scope$pos);\n            const res = fn();\n            const end = this.mark();\n            if(end.overallPos <= lastPos.overallPos)\n                break;\n            lastRes = res;\n            lastPos = end;\n            this.$scope$exp3$memo.set($scope$pos.overallPos, [lastRes, lastPos]);\n        }\n        this.reset(lastPos);\n        this.memoSafe = $scope$oldMemoSafe;\n        return lastRes;\n    }\n    public matchexp3_1($$dpth: number, $$cr?: ErrorTracker): Nullable<exp3_1> {\n        return this.run<exp3_1>($$dpth,\n            () => {\n                let $scope$left: Nullable<exp3>;\n                let $scope$beforeOp: Nullable<sep>;\n                let $scope$op: Nullable<addSub>;\n                let $scope$afterOp: Nullable<sep>;\n                let $scope$right: Nullable<exp2>;\n                let $$res: Nullable<exp3_1> = null;\n                if (true\n                    && ($scope$left = this.matchexp3($$dpth + 1, $$cr)) !== null\n                    && ($scope$beforeOp = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && ($scope$op = this.matchaddSub($$dpth + 1, $$cr)) !== null\n                    && ($scope$afterOp = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && ($scope$right = this.matchexp2($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.exp3_1, left: $scope$left, beforeOp: $scope$beforeOp, op: $scope$op, afterOp: $scope$afterOp, right: $scope$right};\n                }\n                return $$res;\n            });\n    }\n    public matchexp3_2($$dpth: number, $$cr?: ErrorTracker): Nullable<exp3_2> {\n        return this.matchexp2($$dpth + 1, $$cr);\n    }\n    public matchexp4($$dpth: number, $$cr?: ErrorTracker): Nullable<exp4> {\n        const fn = () => {\n            return this.choice<exp4>([\n                () => this.matchexp4_1($$dpth + 1, $$cr),\n                () => this.matchexp4_2($$dpth + 1, $$cr),\n            ]);\n        };\n        const $scope$pos = this.mark();\n        const memo = this.$scope$exp4$memo.get($scope$pos.overallPos);\n        if(memo !== undefined) {\n            this.reset(memo[1]);\n            return memo[0];\n        }\n        const $scope$oldMemoSafe = this.memoSafe;\n        this.memoSafe = false;\n        this.$scope$exp4$memo.set($scope$pos.overallPos, [null, $scope$pos]);\n        let lastRes: Nullable<exp4> = null;\n        let lastPos: PosInfo = $scope$pos;\n        for(;;) {\n            this.reset($scope$pos);\n            const res = fn();\n            const end = this.mark();\n            if(end.overallPos <= lastPos.overallPos)\n                break;\n            lastRes = res;\n            lastPos = end;\n            this.$scope$exp4$memo.set($scope$pos.overallPos, [lastRes, lastPos]);\n        }\n        this.reset(lastPos);\n        this.memoSafe = $scope$oldMemoSafe;\n        return lastRes;\n    }\n    public matchexp4_1($$dpth: number, $$cr?: ErrorTracker): Nullable<exp4_1> {\n        return this.run<exp4_1>($$dpth,\n            () => {\n                let $scope$left: Nullable<exp4>;\n                let $scope$beforeOp: Nullable<sep>;\n                let $scope$op: Nullable<mulDiv>;\n                let $scope$afterOp: Nullable<sep>;\n                let $scope$right: Nullable<exp3>;\n                let $$res: Nullable<exp4_1> = null;\n                if (true\n                    && ($scope$left = this.matchexp4($$dpth + 1, $$cr)) !== null\n                    && ($scope$beforeOp = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && ($scope$op = this.matchmulDiv($$dpth + 1, $$cr)) !== null\n                    && ($scope$afterOp = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && ($scope$right = this.matchexp3($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.exp4_1, left: $scope$left, beforeOp: $scope$beforeOp, op: $scope$op, afterOp: $scope$afterOp, right: $scope$right};\n                }\n                return $$res;\n            });\n    }\n    public matchexp4_2($$dpth: number, $$cr?: ErrorTracker): Nullable<exp4_2> {\n        return this.matchexp3($$dpth + 1, $$cr);\n    }\n    public matchexp5($$dpth: number, $$cr?: ErrorTracker): Nullable<exp5> {\n        const fn = () => {\n            return this.choice<exp5>([\n                () => this.matchexp5_1($$dpth + 1, $$cr),\n                () => this.matchexp5_2($$dpth + 1, $$cr),\n            ]);\n        };\n        const $scope$pos = this.mark();\n        const memo = this.$scope$exp5$memo.get($scope$pos.overallPos);\n        if(memo !== undefined) {\n            this.reset(memo[1]);\n            return memo[0];\n        }\n        const $scope$oldMemoSafe = this.memoSafe;\n        this.memoSafe = false;\n        this.$scope$exp5$memo.set($scope$pos.overallPos, [null, $scope$pos]);\n        let lastRes: Nullable<exp5> = null;\n        let lastPos: PosInfo = $scope$pos;\n        for(;;) {\n            this.reset($scope$pos);\n            const res = fn();\n            const end = this.mark();\n            if(end.overallPos <= lastPos.overallPos)\n                break;\n            lastRes = res;\n            lastPos = end;\n            this.$scope$exp5$memo.set($scope$pos.overallPos, [lastRes, lastPos]);\n        }\n        this.reset(lastPos);\n        this.memoSafe = $scope$oldMemoSafe;\n        return lastRes;\n    }\n    public matchexp5_1($$dpth: number, $$cr?: ErrorTracker): Nullable<exp5_1> {\n        return this.run<exp5_1>($$dpth,\n            () => {\n                let $scope$left: Nullable<exp5>;\n                let $scope$beforeOp: Nullable<sep>;\n                let $scope$afterOp: Nullable<sep>;\n                let $scope$right: Nullable<exp4>;\n                let $$res: Nullable<exp5_1> = null;\n                if (true\n                    && ($scope$left = this.matchexp5($$dpth + 1, $$cr)) !== null\n                    && ($scope$beforeOp = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null\n                    && ($scope$afterOp = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && ($scope$right = this.matchexp4($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.exp5_1, left: $scope$left, beforeOp: $scope$beforeOp, afterOp: $scope$afterOp, right: $scope$right};\n                }\n                return $$res;\n            });\n    }\n    public matchexp5_2($$dpth: number, $$cr?: ErrorTracker): Nullable<exp5_2> {\n        return this.matchexp4($$dpth + 1, $$cr);\n    }\n    public matchapplication($$dpth: number, $$cr?: ErrorTracker): Nullable<application> {\n        return this.choice<application>([\n            () => this.matchapplication_1($$dpth + 1, $$cr),\n            () => this.matchapplication_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchapplication_1($$dpth: number, $$cr?: ErrorTracker): Nullable<application_1> {\n        return this.matchfunctionApplication($$dpth + 1, $$cr);\n    }\n    public matchapplication_2($$dpth: number, $$cr?: ErrorTracker): Nullable<application_2> {\n        return this.matchvectorApplication($$dpth + 1, $$cr);\n    }\n    public matchfunctionApplication($$dpth: number, $$cr?: ErrorTracker): Nullable<functionApplication> {\n        return this.run<functionApplication>($$dpth,\n            () => {\n                let $scope$beforeParen: Nullable<sep>;\n                let $scope$beginArgs: Nullable<sep>;\n                let $scope$operands: Nullable<argumentList>;\n                let $scope$endArgs: Nullable<sep>;\n                let $$res: Nullable<functionApplication> = null;\n                if (true\n                    && ($scope$beforeParen = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?:\\()`, $$dpth + 1, $$cr) !== null\n                    && ($scope$beginArgs = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && ($scope$operands = this.matchargumentList($$dpth + 1, $$cr)) !== null\n                    && ($scope$endArgs = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?:\\))`, $$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.functionApplication, beforeParen: $scope$beforeParen, beginArgs: $scope$beginArgs, operands: $scope$operands, endArgs: $scope$endArgs};\n                }\n                return $$res;\n            });\n    }\n    public matchvectorApplication($$dpth: number, $$cr?: ErrorTracker): Nullable<vectorApplication> {\n        return this.run<vectorApplication>($$dpth,\n            () => {\n                let $scope$beforeParen: Nullable<sep>;\n                let $scope$beginInds: Nullable<sep>;\n                let $scope$operands: Nullable<indexList>;\n                let $scope$endInds: Nullable<sep>;\n                let $$res: Nullable<vectorApplication> = null;\n                if (true\n                    && ($scope$beforeParen = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?:\\[)`, $$dpth + 1, $$cr) !== null\n                    && ($scope$beginInds = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && ($scope$operands = this.matchindexList($$dpth + 1, $$cr)) !== null\n                    && ($scope$endInds = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?:\\])`, $$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.vectorApplication, beforeParen: $scope$beforeParen, beginInds: $scope$beginInds, operands: $scope$operands, endInds: $scope$endInds};\n                }\n                return $$res;\n            });\n    }\n    public matchaddSub($$dpth: number, $$cr?: ErrorTracker): Nullable<addSub> {\n        return this.choice<addSub>([\n            () => this.matchaddSub_1($$dpth + 1, $$cr),\n            () => this.matchaddSub_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchaddSub_1($$dpth: number, $$cr?: ErrorTracker): Nullable<addSub_1> {\n        return this.run<addSub_1>($$dpth,\n            () => {\n                let $scope$v: Nullable<string>;\n                let $$res: Nullable<addSub_1> = null;\n                if (true\n                    && ($scope$v = this.regexAccept(String.raw`(?:\\+)`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.addSub_1, v: $scope$v};\n                }\n                return $$res;\n            });\n    }\n    public matchaddSub_2($$dpth: number, $$cr?: ErrorTracker): Nullable<addSub_2> {\n        return this.run<addSub_2>($$dpth,\n            () => {\n                let $scope$v: Nullable<string>;\n                let $$res: Nullable<addSub_2> = null;\n                if (true\n                    && ($scope$v = this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.addSub_2, v: $scope$v};\n                }\n                return $$res;\n            });\n    }\n    public matchmulDiv($$dpth: number, $$cr?: ErrorTracker): Nullable<mulDiv> {\n        return this.choice<mulDiv>([\n            () => this.matchmulDiv_1($$dpth + 1, $$cr),\n            () => this.matchmulDiv_2($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchmulDiv_1($$dpth: number, $$cr?: ErrorTracker): Nullable<mulDiv_1> {\n        return this.run<mulDiv_1>($$dpth,\n            () => {\n                let $scope$v: Nullable<string>;\n                let $$res: Nullable<mulDiv_1> = null;\n                if (true\n                    && ($scope$v = this.regexAccept(String.raw`(?:\\*)`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.mulDiv_1, v: $scope$v};\n                }\n                return $$res;\n            });\n    }\n    public matchmulDiv_2($$dpth: number, $$cr?: ErrorTracker): Nullable<mulDiv_2> {\n        return this.run<mulDiv_2>($$dpth,\n            () => {\n                let $scope$v: Nullable<string>;\n                let $$res: Nullable<mulDiv_2> = null;\n                if (true\n                    && ($scope$v = this.regexAccept(String.raw`(?:/)`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.mulDiv_2, v: $scope$v};\n                }\n                return $$res;\n            });\n    }\n    public matchlistExp($$dpth: number, $$cr?: ErrorTracker): Nullable<listExp> {\n        return this.choice<listExp>([\n            () => this.matchlistExp_1($$dpth + 1, $$cr),\n            () => this.matchlistExp_2($$dpth + 1, $$cr),\n            () => this.matchlistExp_3($$dpth + 1, $$cr),\n            () => this.matchlistExp_4($$dpth + 1, $$cr),\n        ]);\n    }\n    public matchlistExp_1($$dpth: number, $$cr?: ErrorTracker): Nullable<listExp_1> {\n        return this.matchscalar($$dpth + 1, $$cr);\n    }\n    public matchlistExp_2($$dpth: number, $$cr?: ErrorTracker): Nullable<listExp_2> {\n        return this.matchNA($$dpth + 1, $$cr);\n    }\n    public matchlistExp_3($$dpth: number, $$cr?: ErrorTracker): Nullable<listExp_3> {\n        return this.matchstructure($$dpth + 1, $$cr);\n    }\n    public matchlistExp_4($$dpth: number, $$cr?: ErrorTracker): Nullable<listExp_4> {\n        return this.run<listExp_4>($$dpth,\n            () => {\n                let $scope$operands: Nullable<listExpList>;\n                let $$res: Nullable<listExp_4> = null;\n                if (true\n                    && this.regexAccept(String.raw`(?:c\\()`, $$dpth + 1, $$cr) !== null\n                    && this.matchsep($$dpth + 1, $$cr) !== null\n                    && ($scope$operands = this.matchlistExpList($$dpth + 1, $$cr)) !== null\n                    && this.matchsep($$dpth + 1, $$cr) !== null\n                    && this.regexAccept(String.raw`(?:\\))`, $$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.listExp_4, operands: $scope$operands};\n                }\n                return $$res;\n            });\n    }\n    public matchlistExpList($$dpth: number, $$cr?: ErrorTracker): Nullable<listExpList> {\n        return this.run<listExpList>($$dpth,\n            () => {\n                let $scope$content: Nullable<Nullable<listExpList_$0>>;\n                let $$res: Nullable<listExpList> = null;\n                if (true\n                    && (($scope$content = this.matchlistExpList_$0($$dpth + 1, $$cr)) || true)\n                ) {\n                    $$res = {kind: ASTKinds.listExpList, content: $scope$content};\n                }\n                return $$res;\n            });\n    }\n    public matchlistExpList_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<listExpList_$0> {\n        return this.run<listExpList_$0>($$dpth,\n            () => {\n                let $scope$first: Nullable<listExp>;\n                let $scope$rest: Nullable<listExpList_$0_$0[]>;\n                let $$res: Nullable<listExpList_$0> = null;\n                if (true\n                    && ($scope$first = this.matchlistExp($$dpth + 1, $$cr)) !== null\n                    && ($scope$rest = this.loop<listExpList_$0_$0>(() => this.matchlistExpList_$0_$0($$dpth + 1, $$cr), true)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.listExpList_$0, first: $scope$first, rest: $scope$rest};\n                }\n                return $$res;\n            });\n    }\n    public matchlistExpList_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<listExpList_$0_$0> {\n        return this.run<listExpList_$0_$0>($$dpth,\n            () => {\n                let $scope$sep: Nullable<operandSep>;\n                let $scope$item: Nullable<listExp>;\n                let $$res: Nullable<listExpList_$0_$0> = null;\n                if (true\n                    && ($scope$sep = this.matchoperandSep($$dpth + 1, $$cr)) !== null\n                    && ($scope$item = this.matchlistExp($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.listExpList_$0_$0, sep: $scope$sep, item: $scope$item};\n                }\n                return $$res;\n            });\n    }\n    public matchlist($$dpth: number, $$cr?: ErrorTracker): Nullable<list> {\n        return this.run<list>($$dpth,\n            () => {\n                let $scope$beforeFields: Nullable<sep>;\n                let $scope$operands: Nullable<fieldList>;\n                let $scope$afterFields: Nullable<sep>;\n                let $$res: Nullable<list> = null;\n                if (true\n                    && this.regexAccept(String.raw`(?:list[(])`, $$dpth + 1, $$cr) !== null\n                    && ($scope$beforeFields = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && ($scope$operands = this.matchfieldList($$dpth + 1, $$cr)) !== null\n                    && ($scope$afterFields = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?:[)])`, $$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.list, beforeFields: $scope$beforeFields, operands: $scope$operands, afterFields: $scope$afterFields};\n                }\n                return $$res;\n            });\n    }\n    public matchstructure($$dpth: number, $$cr?: ErrorTracker): Nullable<structure> {\n        return this.run<structure>($$dpth,\n            () => {\n                let $scope$begin: Nullable<sep>;\n                let $scope$sepDotData: Nullable<sep>;\n                let $scope$eqData: Nullable<nameValueSep>;\n                let $scope$data: Nullable<listExp>;\n                let $scope$sepDotDim: Nullable<sep>;\n                let $scope$eqDim: Nullable<nameValueSep>;\n                let $scope$dim: Nullable<listExp>;\n                let $scope$end: Nullable<sep>;\n                let $$res: Nullable<structure> = null;\n                if (true\n                    && this.regexAccept(String.raw`(?:structure[(])`, $$dpth + 1, $$cr) !== null\n                    && ($scope$begin = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?:\\.)`, $$dpth + 1, $$cr) !== null\n                    && ($scope$sepDotData = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?:Data)`, $$dpth + 1, $$cr) !== null\n                    && ($scope$eqData = this.matchnameValueSep($$dpth + 1, $$cr)) !== null\n                    && ($scope$data = this.matchlistExp($$dpth + 1, $$cr)) !== null\n                    && this.matchoperandSep($$dpth + 1, $$cr) !== null\n                    && this.regexAccept(String.raw`(?:\\.)`, $$dpth + 1, $$cr) !== null\n                    && ($scope$sepDotDim = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?:Dim)`, $$dpth + 1, $$cr) !== null\n                    && ($scope$eqDim = this.matchnameValueSep($$dpth + 1, $$cr)) !== null\n                    && ($scope$dim = this.matchlistExp($$dpth + 1, $$cr)) !== null\n                    && ($scope$end = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?:[)])`, $$dpth + 1, $$cr) !== null\n                ) {\n                    $$res = {kind: ASTKinds.structure, begin: $scope$begin, sepDotData: $scope$sepDotData, eqData: $scope$eqData, data: $scope$data, sepDotDim: $scope$sepDotDim, eqDim: $scope$eqDim, dim: $scope$dim, end: $scope$end};\n                }\n                return $$res;\n            });\n    }\n    public matchoperandSep($$dpth: number, $$cr?: ErrorTracker): Nullable<operandSep> {\n        return this.run<operandSep>($$dpth,\n            () => {\n                let $scope$before: Nullable<sep>;\n                let $scope$after: Nullable<sep>;\n                let $$res: Nullable<operandSep> = null;\n                if (true\n                    && ($scope$before = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null\n                    && ($scope$after = this.matchsep($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.operandSep, before: $scope$before, after: $scope$after};\n                }\n                return $$res;\n            });\n    }\n    public matchargument($$dpth: number, $$cr?: ErrorTracker): Nullable<argument> {\n        return this.matchexp($$dpth + 1, $$cr);\n    }\n    public matchargumentList($$dpth: number, $$cr?: ErrorTracker): Nullable<argumentList> {\n        return this.run<argumentList>($$dpth,\n            () => {\n                let $scope$content: Nullable<Nullable<argumentList_$0>>;\n                let $$res: Nullable<argumentList> = null;\n                if (true\n                    && (($scope$content = this.matchargumentList_$0($$dpth + 1, $$cr)) || true)\n                ) {\n                    $$res = {kind: ASTKinds.argumentList, content: $scope$content};\n                }\n                return $$res;\n            });\n    }\n    public matchargumentList_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<argumentList_$0> {\n        return this.run<argumentList_$0>($$dpth,\n            () => {\n                let $scope$first: Nullable<argument>;\n                let $scope$rest: Nullable<argumentList_$0_$0[]>;\n                let $$res: Nullable<argumentList_$0> = null;\n                if (true\n                    && ($scope$first = this.matchargument($$dpth + 1, $$cr)) !== null\n                    && ($scope$rest = this.loop<argumentList_$0_$0>(() => this.matchargumentList_$0_$0($$dpth + 1, $$cr), true)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.argumentList_$0, first: $scope$first, rest: $scope$rest};\n                }\n                return $$res;\n            });\n    }\n    public matchargumentList_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<argumentList_$0_$0> {\n        return this.run<argumentList_$0_$0>($$dpth,\n            () => {\n                let $scope$sep: Nullable<operandSep>;\n                let $scope$item: Nullable<argument>;\n                let $$res: Nullable<argumentList_$0_$0> = null;\n                if (true\n                    && ($scope$sep = this.matchoperandSep($$dpth + 1, $$cr)) !== null\n                    && ($scope$item = this.matchargument($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.argumentList_$0_$0, sep: $scope$sep, item: $scope$item};\n                }\n                return $$res;\n            });\n    }\n    public matchindexList($$dpth: number, $$cr?: ErrorTracker): Nullable<indexList> {\n        return this.run<indexList>($$dpth,\n            () => {\n                let $scope$content: Nullable<Nullable<indexList_$0>>;\n                let $$res: Nullable<indexList> = null;\n                if (true\n                    && (($scope$content = this.matchindexList_$0($$dpth + 1, $$cr)) || true)\n                ) {\n                    $$res = {kind: ASTKinds.indexList, content: $scope$content};\n                }\n                return $$res;\n            });\n    }\n    public matchindexList_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<indexList_$0> {\n        return this.run<indexList_$0>($$dpth,\n            () => {\n                let $scope$first: Nullable<Nullable<exp>>;\n                let $scope$rest: Nullable<indexList_$0_$0[]>;\n                let $$res: Nullable<indexList_$0> = null;\n                if (true\n                    && (($scope$first = this.matchexp($$dpth + 1, $$cr)) || true)\n                    && ($scope$rest = this.loop<indexList_$0_$0>(() => this.matchindexList_$0_$0($$dpth + 1, $$cr), true)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.indexList_$0, first: $scope$first, rest: $scope$rest};\n                }\n                return $$res;\n            });\n    }\n    public matchindexList_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<indexList_$0_$0> {\n        return this.run<indexList_$0_$0>($$dpth,\n            () => {\n                let $scope$sep: Nullable<operandSep>;\n                let $scope$item: Nullable<Nullable<exp>>;\n                let $$res: Nullable<indexList_$0_$0> = null;\n                if (true\n                    && ($scope$sep = this.matchoperandSep($$dpth + 1, $$cr)) !== null\n                    && (($scope$item = this.matchexp($$dpth + 1, $$cr)) || true)\n                ) {\n                    $$res = {kind: ASTKinds.indexList_$0_$0, sep: $scope$sep, item: $scope$item};\n                }\n                return $$res;\n            });\n    }\n    public matchfield($$dpth: number, $$cr?: ErrorTracker): Nullable<field> {\n        return this.run<field>($$dpth,\n            () => {\n                let $scope$name: Nullable<name>;\n                let $scope$sep: Nullable<nameValueSep>;\n                let $scope$value: Nullable<listExp>;\n                let $$res: Nullable<field> = null;\n                if (true\n                    && ($scope$name = this.matchname($$dpth + 1, $$cr)) !== null\n                    && ($scope$sep = this.matchnameValueSep($$dpth + 1, $$cr)) !== null\n                    && ($scope$value = this.matchlistExp($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.field, name: $scope$name, sep: $scope$sep, value: $scope$value};\n                }\n                return $$res;\n            });\n    }\n    public matchfieldList($$dpth: number, $$cr?: ErrorTracker): Nullable<fieldList> {\n        return this.run<fieldList>($$dpth,\n            () => {\n                let $scope$content: Nullable<Nullable<fieldList_$0>>;\n                let $$res: Nullable<fieldList> = null;\n                if (true\n                    && (($scope$content = this.matchfieldList_$0($$dpth + 1, $$cr)) || true)\n                ) {\n                    $$res = {kind: ASTKinds.fieldList, content: $scope$content};\n                }\n                return $$res;\n            });\n    }\n    public matchfieldList_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<fieldList_$0> {\n        return this.run<fieldList_$0>($$dpth,\n            () => {\n                let $scope$first: Nullable<field>;\n                let $scope$rest: Nullable<fieldList_$0_$0[]>;\n                let $$res: Nullable<fieldList_$0> = null;\n                if (true\n                    && ($scope$first = this.matchfield($$dpth + 1, $$cr)) !== null\n                    && ($scope$rest = this.loop<fieldList_$0_$0>(() => this.matchfieldList_$0_$0($$dpth + 1, $$cr), true)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.fieldList_$0, first: $scope$first, rest: $scope$rest};\n                }\n                return $$res;\n            });\n    }\n    public matchfieldList_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<fieldList_$0_$0> {\n        return this.run<fieldList_$0_$0>($$dpth,\n            () => {\n                let $scope$sep: Nullable<operandSep>;\n                let $scope$item: Nullable<field>;\n                let $$res: Nullable<fieldList_$0_$0> = null;\n                if (true\n                    && ($scope$sep = this.matchoperandSep($$dpth + 1, $$cr)) !== null\n                    && ($scope$item = this.matchfield($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.fieldList_$0_$0, sep: $scope$sep, item: $scope$item};\n                }\n                return $$res;\n            });\n    }\n    public matchnameValueSep($$dpth: number, $$cr?: ErrorTracker): Nullable<nameValueSep> {\n        return this.run<nameValueSep>($$dpth,\n            () => {\n                let $scope$before: Nullable<sep>;\n                let $scope$after: Nullable<sep>;\n                let $$res: Nullable<nameValueSep> = null;\n                if (true\n                    && ($scope$before = this.matchsep($$dpth + 1, $$cr)) !== null\n                    && this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr) !== null\n                    && ($scope$after = this.matchsep($$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.nameValueSep, before: $scope$before, after: $scope$after};\n                }\n                return $$res;\n            });\n    }\n    public matchname($$dpth: number, $$cr?: ErrorTracker): Nullable<name> {\n        return this.run<name>($$dpth,\n            () => {\n                let $scope$from: Nullable<PosInfo>;\n                let $scope$value: Nullable<string>;\n                let $scope$to: Nullable<PosInfo>;\n                let $$res: Nullable<name> = null;\n                if (true\n                    && ($scope$from = this.mark()) !== null\n                    && ($scope$value = this.regexAccept(String.raw`(?:[a-zA-Z][a-zA-Z0-9._]*)`, $$dpth + 1, $$cr)) !== null\n                    && ($scope$to = this.mark()) !== null\n                ) {\n                    $$res = {kind: ASTKinds.name, from: $scope$from, value: $scope$value, to: $scope$to};\n                }\n                return $$res;\n            });\n    }\n    public matchscalar($$dpth: number, $$cr?: ErrorTracker): Nullable<scalar> {\n        return this.run<scalar>($$dpth,\n            () => {\n                let $scope$value: Nullable<string>;\n                let $$res: Nullable<scalar> = null;\n                if (true\n                    && ($scope$value = this.regexAccept(String.raw`(?:-?([\\d]+([.][\\d]+)?|([\\d]+)?[.][\\d]+)([eE]-?[\\d]+)?)`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.scalar, value: $scope$value};\n                }\n                return $$res;\n            });\n    }\n    public matchNA($$dpth: number, $$cr?: ErrorTracker): Nullable<NA> {\n        return this.run<NA>($$dpth,\n            () => {\n                let $scope$v: Nullable<string>;\n                let $$res: Nullable<NA> = null;\n                if (true\n                    && ($scope$v = this.regexAccept(String.raw`(?:NA)`, $$dpth + 1, $$cr)) !== null\n                ) {\n                    $$res = {kind: ASTKinds.NA, v: $scope$v};\n                }\n                return $$res;\n            });\n    }\n    public test(): boolean {\n        const mrk = this.mark();\n        const res = this.matchprogram(0);\n        const ans = res !== null;\n        this.reset(mrk);\n        return ans;\n    }\n    public parse(): ParseResult {\n        const mrk = this.mark();\n        const res = this.matchprogram(0);\n        if (res)\n            return {ast: res, errs: []};\n        this.reset(mrk);\n        const rec = new ErrorTracker();\n        this.clearMemos();\n        this.matchprogram(0, rec);\n        const err = rec.getErr()\n        return {ast: res, errs: err !== null ? [err] : []}\n    }\n    public mark(): PosInfo {\n        return this.pos;\n    }\n    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {\n        const mrk = this.mark();\n        const res: T[] = [];\n        for (;;) {\n            const t = func();\n            if (t === null) {\n                break;\n            }\n            res.push(t);\n        }\n        if (star || res.length > 0) {\n            return res;\n        }\n        this.reset(mrk);\n        return null;\n    }\n    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {\n        const mrk = this.mark();\n        const res = fn()\n        if (res !== null)\n            return res;\n        this.reset(mrk);\n        return null;\n    }\n    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {\n        for (const f of fns) {\n            const res = f();\n            if (res !== null) {\n                return res;\n            }\n        }\n        return null;\n    }\n    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {\n        return this.run<string>(dpth,\n            () => {\n                const reg = new RegExp(match, \"y\");\n                const mrk = this.mark();\n                reg.lastIndex = mrk.overallPos;\n                const res = this.tryConsume(reg);\n                if(cr) {\n                    cr.record(mrk, res, {\n                        kind: \"RegexMatch\",\n                        // We substring from 3 to len - 1 to strip off the\n                        // non-capture group syntax added as a WebKit workaround\n                        literal: match.substring(3, match.length - 1),\n                        negated: this.negating,\n                    });\n                }\n                return res;\n            });\n    }\n    private tryConsume(reg: RegExp): Nullable<string> {\n        const res = reg.exec(this.input);\n        if (res) {\n            let lineJmp = 0;\n            let lind = -1;\n            for (let i = 0; i < res[0].length; ++i) {\n                if (res[0][i] === \"\\n\") {\n                    ++lineJmp;\n                    lind = i;\n                }\n            }\n            this.pos = {\n                overallPos: reg.lastIndex,\n                line: this.pos.line + lineJmp,\n                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)\n            };\n            return res[0];\n        }\n        return null;\n    }\n    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {\n        const mrk = this.mark();\n        const res = fn();\n        this.reset(mrk);\n        return res;\n    }\n    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {\n        const mrk = this.mark();\n        const oneg = this.negating;\n        this.negating = !oneg;\n        const res = fn();\n        this.negating = oneg;\n        this.reset(mrk);\n        return res === null ? true : null;\n    }\n    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {\n        const $scope$pos = this.mark();\n        const $scope$memoRes = memo.get($scope$pos.overallPos);\n        if(this.memoSafe && $scope$memoRes !== undefined) {\n        this.reset($scope$memoRes[1]);\n        return $scope$memoRes[0];\n        }\n        const $scope$result = rule();\n        if(this.memoSafe)\n        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);\n        return $scope$result;\n    }\n}\nexport function parse(s: string): ParseResult {\n    const p = new Parser(s);\n    return p.parse();\n}\nexport interface ParseResult {\n    ast: Nullable<program>;\n    errs: SyntaxErr[];\n}\nexport interface PosInfo {\n    readonly overallPos: number;\n    readonly line: number;\n    readonly offset: number;\n}\nexport interface RegexMatch {\n    readonly kind: \"RegexMatch\";\n    readonly negated: boolean;\n    readonly literal: string;\n}\nexport type EOFMatch = { kind: \"EOF\"; negated: boolean };\nexport type MatchAttempt = RegexMatch | EOFMatch;\nexport class SyntaxErr {\n    public pos: PosInfo;\n    public expmatches: MatchAttempt[];\n    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {\n        this.pos = pos;\n        this.expmatches = [...expmatches];\n    }\n    public toString(): string {\n        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === \"EOF\" ? \" EOF\" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;\n    }\n}\nclass ErrorTracker {\n    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};\n    private regexset: Set<string> = new Set();\n    private pmatches: MatchAttempt[] = [];\n    public record(pos: PosInfo, result: any, att: MatchAttempt) {\n        if ((result === null) === att.negated)\n            return;\n        if (pos.overallPos > this.mxpos.overallPos) {\n            this.mxpos = pos;\n            this.pmatches = [];\n            this.regexset.clear()\n        }\n        if (this.mxpos.overallPos === pos.overallPos) {\n            if(att.kind === \"RegexMatch\") {\n                if(!this.regexset.has(att.literal))\n                    this.pmatches.push(att);\n                this.regexset.add(att.literal);\n            } else {\n                this.pmatches.push(att);\n            }\n        }\n    }\n    public getErr(): SyntaxErr | null {\n        if (this.mxpos.overallPos !== -1)\n            return new SyntaxErr(this.mxpos, this.pmatches);\n        return null;\n    }\n}", "export type Doc = Array<string>\n\nexport function makePrinter(indent = '  ') {\n\n\tfunction text(content: string): Doc {\n\t\treturn [content];\n\t}\n\n\tfunction nest(content: Doc): Doc {\n\t\treturn content.map((line) => indent + line);\n\t}\n\n\n\tfunction repeat(s: string, i: number): string {\n\t\tif (i === 0) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\treturn s + repeat(s, i - 1);\n\t\t}\n\t}\n\n\tfunction fconcat(content: Array<Doc>): Doc {\n\t\treturn content.\n\t\t\t\treduce((IH, cur) => {\n\t\t\t\t\tconst lastLine = IH[IH.length - 1];\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...IH.slice(0, -1),\n\t\t\t\t\t\tlastLine + cur[0],\n\t\t\t\t\t\t...cur.slice(1)\n\t\t\t\t\t]\n\t\t\t\t}, [\"\"])\n\t}\n\n\tfunction inlineBlock(content: Array<Doc>): Doc {\n\t\treturn content.\n\t\t\t\treduce((IH, cur) => {\n\t\t\t\t\tconst lastLine = IH[IH.length - 1];\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...IH.slice(0, -1),\n\t\t\t\t\t\tlastLine + cur[0],\n\t\t\t\t\t\t...cur.slice(1).map((line) => {\n\t\t\t\t\t\t\treturn repeat(' ', lastLine.length) + line\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}, [\"\"])\n\t}\n\n\tfunction vconcat(content: Array<Doc>): Doc {\n\t\treturn content.flatMap((x) => x);\n\t}\n\n\tfunction toString(doc: Doc): string {\n\t\treturn doc.join('\\n');\n\t}\n\n\tfunction equations(eqs: Array<[Doc, string, Doc]>) {\n\t\tconst lhsWidth = Math.max(...eqs.flatMap(([lhs, r, rhs]) => {\n\t\t\treturn lhs.map((line) => line.length)\n\t\t}))\n\t\tconst rWidth = Math.max(...eqs.map(([lhs, r, rhs]) => {\n\t\t\treturn r.length\n\t\t}))\n\t\treturn vconcat([\n\t\t\t// text(lhsWidth.toString()),\n\t\t\t// text(rWidth.toString()),\n\t\t\t...eqs.map(([lhs, r, rhs]) => {\n\t\t\t\tlhs[lhs.length - 1] += repeat(' ', lhsWidth - lhs[lhs.length - 1].length)\n\t\t\t\tr = repeat(' ', rWidth - r.length) + r\n\t\t\t\treturn fconcat([\n\t\t\t\t\tlhs, text(r), rhs\n\t\t\t\t])\n\t\t\t})\n\t\t])\n\t}\n\n\treturn {\n\t\ttext, nest, vconcat, fconcat, inlineBlock, toString, equations\n\t}\n}\n\n", "export const Seq = {\n\tcartesianProduct: <X, Y>(xs: Array<X>, ys: Array<Y>) => {\n\t\tconst zs: Array<{left: X, right: Y}> = [];\n\t\tfor (const left of xs) {\n\t\t\tfor (const right of ys) {\n\t\t\t\tzs.push({ left, right })\n\t\t\t}\n\t\t}\n\t\treturn zs\n\t},\n\tfindFirst: <X>(xs: Array<X>, p: (x: X) => boolean) => {\n\t\tfor (const x of xs) {\n\t\t\tif (p(x)) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t}\n\t\tthrow \"Not found\"\n\t},\n\tfilter: <X>(xs: Array<X>, p: (x: X) => boolean) => {\n\t\treturn xs.filter(p)\n\t},\n\tdropWhile: <X>(xs: Array<X>, p: (x: X) => boolean) => {\n\t\tlet i: number;\n\t\tfor (i = 0; i < xs.length && p(xs[i]); i++) {\n\t\t}\n\t\treturn xs.slice(i);\n\t},\n\tintersperse: <A>(a: A, as: Array<A>): Array<A> => {\n\t\tif (as.length === 0) {\n\t\t\treturn as;\n\t\t} else {\n\t\t\tconst bs: Array<A> = [];\n\t\t\tbs.push(as[0]);\n\t\t\tfor (let i = 1; i < as.length; i++) {\n\t\t\t\tbs.push(a);\n\t\t\t\tbs.push(as[i]);\n\t\t\t}\n\t\t\treturn bs;\n\t\t}\n\t}\n\n}", "import { ParameterStructures, Position } from 'vscode-languageserver';\nimport * as bugsPeg from './bugsPeg';\nimport { Doc, makePrinter } from './prettyPrinter';\nimport { Seq } from './Seq';\n\nconst PP = makePrinter('    ')\n\ninterface ParseError {\n\tposition: Position;\n\tmessage: string;\n}\n\nfunction positionOfPosInfo(pos: bugsPeg.PosInfo): Position {\n\treturn {\n\t\t\"line\": pos.line - 1,\n\t\t\"character\": pos.offset\n\t}\n}\n\ntype Error<V, E> = { kind: \"error\", content: E } | { kind: \"value\", content: V }\n\nfunction succeed<V, E>(v: V): Error<V, E> {\n\treturn { kind: \"value\", content: v }\n}\n\nfunction fail<V, E>(e: E): Error<V, E> {\n\treturn { kind: \"error\", content: e }\n}\n\nfunction messageOfPegError(e: bugsPeg.SyntaxErr): string {\n\tlet expectations = e.expmatches.\n\t\tmap((x) => {\n\t\t\tif (x.kind === 'RegexMatch') {\n\t\t\t\treturn x.literal;\n\t\t\t} else {\n\t\t\t\treturn 'EOF'\n\t\t\t}\n\t\t}).\n\t\tflatMap((entry) => {\n\t\t\tif (entry === '[\\\\n]') {\n\t\t\t\treturn []\n\t\t\t} else if (entry === '[#]') {\n\t\t\t\treturn []\n\t\t\t} else if (entry === ';') {\n\t\t\t\treturn [\"';'\"]\n\t\t\t} else if (entry === '\\\\(') {\n\t\t\t\treturn [\"'('\"]\n\t\t\t} else if (entry === '\\\\)') {\n\t\t\t\treturn [\"')'\"]\n\t\t\t} else if (entry === '\\\\[') {\n\t\t\t\treturn [\"'['\"]\n\t\t\t} else if (entry === '\\\\]') {\n\t\t\t\treturn [\"']'\"]\n\t\t\t} else if (entry === '{') {\n\t\t\t\treturn [\"'{'\"]\n\t\t\t} else if (entry === '}') {\n\t\t\t\treturn [\"'}'\"]\n\t\t\t} else if (entry === '\\\\+') {\n\t\t\t\treturn [\"'+'\"]\n\t\t\t} else if (entry === '-') {\n\t\t\t\treturn [\"'-'\"]\n\t\t\t} else if (entry === '\\\\*') {\n\t\t\t\treturn [\"'*'\"]\n\t\t\t} else if (entry === '/') {\n\t\t\t\treturn [\"'/'\"]\n\t\t\t} else if (entry === ':') {\n\t\t\t\treturn [\"':'\"]\n\t\t\t} else if (entry === ',') {\n\t\t\t\treturn [\"','\"]\n\t\t\t} else if (entry === '.') {\n\t\t\t\treturn [\"'.'\"]\n\t\t\t} else if (entry === '~') {\n\t\t\t\treturn [\"'~'\"]\n\t\t\t} else if (entry === '=') {\n\t\t\t\treturn [\"'='\"]\n\t\t\t} else if (entry === '<-') {\n\t\t\t\treturn [\"'<-'\"]\n\t\t\t} else if (entry === 'C') {\n\t\t\t\treturn [\"a 'C(,)'\"]\n\t\t\t} else if (entry === 'T') {\n\t\t\t\treturn [\"a 'T(,)'\"]\n\t\t\t} else if (entry === 'I') {\n\t\t\t\treturn [\"a 'I(,)'\"]\n\t\t\t} else if (entry === 'in') {\n\t\t\t\treturn [\"the keyword 'in'\"]\n\t\t\t} else if (entry === 'END') {\n\t\t\t\treturn [\"the keyword 'END'\"]\n\t\t\t} else if (entry === 'Dim') {\n\t\t\t\treturn [\"the word 'Dim'\"]\n\t\t\t} else if (entry === 'Data') {\n\t\t\t\treturn [\"the word 'Data'\"]\n\t\t\t} else if (entry === 'for') {\n\t\t\t\treturn [\"a \\\"for-loop\\\"\"]\n\t\t\t} else if (entry === 'data') {\n\t\t\t\treturn [\"a data block\"]\n\t\t\t} else if (entry === 'model') {\n\t\t\t\treturn [\"a model block\"]\n\t\t\t} else if (entry === '-?([\\\\d]+([.][\\\\d]+)?|([\\\\d]+)?[.][\\\\d]+)([eE]-?[\\\\d]+)?') {\n\t\t\t\treturn [\"a number\"]\n\t\t\t} else if (entry === '[a-zA-Z][a-zA-Z0-9._]*') {\n\t\t\t\treturn [\"a variable\"]\n\t\t\t} else if (entry === 'list[(]') {\n\t\t\t\treturn [\"a list\"]\n\t\t\t} else if (entry === 'structure[(]') {\n\t\t\t\treturn [\"a structure\"]\n\t\t\t} else {\n\t\t\t\treturn [entry]\n\t\t\t}\n\t\t})\n\texpectations.sort((a, b) => a.length - b.length)\n\treturn `Expecting ${[...expectations].slice(0, -1).join(', ')}, or ${expectations[expectations.length - 1]}`\n}\n\nexport function parse(sourceCode: string): Error<Program, ParseError[]> {\n\tlet parseResult = bugsPeg.parse(sourceCode);\n\tif (parseResult.ast !== null) {\n\t\treturn succeed(transformProgram(parseResult.ast));\n\t} else {\n\t\tconst errors: ParseError[] = parseResult.errs.map((e) => {\n\t\t\treturn {\n\t\t\t\tposition: positionOfPosInfo(e.pos),\n\t\t\t\tmessage: messageOfPegError(e)\n\t\t\t}\n\t\t});\n\t\treturn fail(errors);\n\t}\n}\n\nfunction transformProgram(program: bugsPeg.program): Program {\n\tfunction tName(name: bugsPeg.name): Name {\n\t\treturn {\n\t\t\tliteral: name.value,\n\t\t\tstart: positionOfPosInfo(name.from),\n\t\t\tend: positionOfPosInfo(name.to)\n\t\t}\n\t}\n\tfunction tExp0(exp: bugsPeg.exp0): Expression {\n\t\tif (exp.kind === 'exp0_3') {\n\t\t\treturn { kind: '()', content: tExp(exp.exp) }\n\t\t} else if (exp.kind === 'name') {\n\t\t\treturn { kind: 'variable', name: tName(exp) }\n\t\t} else if (exp.kind === 'scalar') {\n\t\t\treturn tScalar(exp)\n\t\t} else {\n\t\t\tthrow \"Never\";\n\t\t}\n\t}\n\tconst tExpNullable = (e: bugsPeg.exp | null) => {\n\t\tif (e === null) {\n\t\t\treturn null\n\t\t} else {\n\t\t\treturn tExp(e);\n\t\t}\n\t}\n\tfunction tExp(exp: bugsPeg.exp): Expression {\n\t\tif (exp.kind === 'exp2_1') {\n\t\t\treturn { kind: 'unop', operator: '-', exp: tExp(exp.exp) }\n\t\t} else if (exp.kind === 'exp3_1') {\n\t\t\tconst op = (exp.op.kind === 'addSub_1') ? '+' : '-';\n\t\t\treturn { kind: 'binop', operator: op, lft: tExp(exp.left), rht: tExp(exp.right) }\n\t\t} else if (exp.kind === 'exp4_1') {\n\t\t\tconst op = (exp.op.kind === 'mulDiv_1') ? '*' : '/';\n\t\t\treturn { kind: 'binop', operator: op, lft: tExp(exp.left), rht: tExp(exp.right) }\n\t\t} else if (exp.kind === 'exp5_1') {\n\t\t\treturn { kind: 'binop', operator: ':', lft: tExp(exp.left), rht: tExp(exp.right) }\n\t\t} else {\n\t\t\tlet e: Expression = tExp0(exp.base);\n\t\t\tfor (const app of exp.applications) {\n\t\t\t\tif (app.kind === 'functionApplication') {\n\t\t\t\t\tlet operands: Array<Expression> = [];\n\t\t\t\t\tif (app.operands.content !== null) {\n\t\t\t\t\t\toperands.push(tExp(app.operands.content.first))\n\t\t\t\t\t\tapp.operands.content.rest.forEach((x) => {\n\t\t\t\t\t\t\toperands.push(tExp(x.item));\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\te = { kind: 'application', operator: e, operands };\n\t\t\t\t} else {\n\t\t\t\t\tlet operands: Array<Expression | null> = [];\n\t\t\t\t\tif (app.operands.content) {\n\t\t\t\t\t\toperands.push(tExpNullable(app.operands.content.first))\n\t\t\t\t\t\tapp.operands.content.rest.forEach((x) => {\n\t\t\t\t\t\t\toperands.push(tExpNullable(x.item));\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\te = { kind: 'subscription', operator: e, operands }\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn e;\n\t\t}\n\t}\n\tfunction tListExp(exp: bugsPeg.listExp): ListExp {\n\t\tif (exp.kind === 'scalar') {\n\t\t\treturn tScalar(exp)\n\t\t} else if (exp.kind === 'NA') {\n\t\t\treturn { 'kind': 'NA' }\n\t\t} else if (exp.kind === 'structure') {\n\t\t\treturn { 'kind': 'structure', 'data': tListExp(exp.data), 'dim': tListExp(exp.dim) }\n\t\t} else {\n\t\t\treturn { 'kind': 'c', 'content': [tListExp(exp.operands.content.first), ...exp.operands.content.rest.map(({ sep, item }) => tListExp(item))] }\n\t\t}\n\t}\n\tfunction tList(list: bugsPeg.list): List {\n\t\tconst operands: [Name, ListExp][] = [];\n\t\tfunction tField(field: bugsPeg.field): [Name, ListExp] {\n\t\t\treturn [tName(field.name), tListExp(field.value)]\n\t\t}\n\t\tif (list.operands.content !== null) {\n\t\t\toperands.push(tField(list.operands.content.first))\n\t\t\toperands.push(...list.operands.content.rest.map(({ sep, item }) => {\n\t\t\t\treturn tField(item);\n\t\t\t}))\n\t\t}\n\t\treturn { kind: \"list\", \"content\": operands }\n\t}\n\tfunction tRelation(relation: bugsPeg.relation): Relation {\n\t\tif (relation.kind === 'stochasticRelation') {\n\t\t\tlet cti: StochasticRelation['cti'];\n\t\t\tif (relation.cti === null) {\n\t\t\t\tcti = null;\n\t\t\t} else {\n\t\t\t\tconst header = (\n\t\t\t\t\trelation.cti.header.kind === 'ctiHeader_1'\n\t\t\t\t\t\t? 'C'\n\t\t\t\t\t\t: relation.cti.header.kind === 'ctiHeader_2'\n\t\t\t\t\t\t\t? 'T'\n\t\t\t\t\t\t\t: 'I')\n\t\t\t\tcti = {\n\t\t\t\t\tkind: header,\n\t\t\t\t\tlower: tExpNullable(relation.cti.lower),\n\t\t\t\t\tupper: tExpNullable(relation.cti.upper)\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tkind: '~', lhs: tExp(relation.lhs),\n\t\t\t\trhs: tExp(relation.rhs), cti\n\t\t\t}\n\t\t} else if (relation.kind === 'deterministicRelation') {\n\t\t\treturn {\n\t\t\t\tkind: '=',\n\t\t\t\tlhs: tExp(relation.lhs),\n\t\t\t\trhs: tExp(relation.rhs),\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tkind: 'for',\n\t\t\t\t'name': tName(relation.name),\n\t\t\t\t'domain': tExp(relation.domain),\n\t\t\t\t'body': tBlock(relation.body)\n\t\t\t}\n\t\t}\n\t}\n\tfunction tSepItem(sep: bugsPeg.sepItem): Array<SeperatorItem> {\n\t\tif (sep.kind === 'newline') {\n\t\t\treturn [tNewline(sep)]\n\t\t} else {\n\t\t\treturn [tComment(sep)];\n\t\t}\n\t}\n\tfunction tRelationSep(sep: bugsPeg.relationSep): Array<SeperatorItem> {\n\t\treturn sep.body.flatMap(({ sep, item }) => {\n\t\t\tif (item.kind === 'relationSepItem_2') {\n\t\t\t\treturn []\n\t\t\t} else {\n\t\t\t\treturn tSepItem(item)\n\t\t\t}\n\t\t})\n\t}\n\tfunction tBlock(block: bugsPeg.block): Block {\n\t\tconst relations: Relation[] = [];\n\t\tconst seperators: SeperatorItem[][] = [];\n\t\tseperators.push(tRelationSep(block.before))\n\t\trelations.push(tRelation(block.body.head));\n\t\tseperators.push(...block.body.tail.map(({ sep, item }) => {\n\t\t\treturn tRelationSep(sep)\n\t\t}));\n\t\trelations.push(...block.body.tail.map(({ sep, item }) => {\n\t\t\treturn tRelation(item)\n\t\t}));\n\t\tseperators.push(tRelationSep(block.after))\n\t\treturn { relations, seperators };\n\t}\n\tfunction tScalar(scalar: bugsPeg.scalar): Scalar {\n\t\treturn { kind: 'scalar', literal: scalar.value }\n\t}\n\tfunction tSection(section: bugsPeg.section): Section {\n\t\tconst kind = (section.header.kind === 'sectionHeader_1'\n\t\t\t? 'model'\n\t\t\t: 'data');\n\t\treturn {\n\t\t\t\"kind\": kind,\n\t\t\t'body': tBlock(section.body)\n\t\t}\n\t}\n\tfunction tNewline(x: bugsPeg.newline): SeperatorItem {\n\t\treturn { kind: 'newline' };\n\t}\n\tfunction tComment(x: bugsPeg.comment): SeperatorItem {\n\t\treturn { kind: 'comment', content: x.content }\n\t}\n\tfunction tProgramBody(program: bugsPeg.programBody): List | TableProgram | ModelProgram {\n\t\tif (program.kind === 'list') {\n\t\t\treturn tList(program)\n\t\t} else if (program.kind === 'rectangular') {\n\t\t\tconst header = program.header.content.map(({ sep, item }) => {\n\t\t\t\treturn tName(item);\n\t\t\t})\n\t\t\tconst body = program.body.map(({ sep, item }) => {\n\t\t\t\treturn item.content.map(({ sep, item }) => {\n\t\t\t\t\treturn tScalar(item)\n\t\t\t\t})\n\t\t\t})\n\t\t\treturn {\n\t\t\t\tkind: 'table',\n\t\t\t\theader: header,\n\t\t\t\tbody: body\n\t\t\t}\n\t\t} else {\n\t\t\tconst sections: Array<Section> = [];\n\t\t\tsections.push(tSection(program.head))\n\t\t\tsections.push(...program.tail.map(({ sep, item }) => {\n\t\t\t\treturn tSection(item)\n\t\t\t}))\n\t\t\treturn { kind: 'model', content: sections }\n\t\t}\n\t}\n\tconst before = program.before.body.flatMap(({ sep, item }) => tSepItem(item))\n\tconst after = program.after.body.flatMap(({ sep, item }) => tSepItem(item))\n\treturn { before, after, body: tProgramBody(program.body) }\n}\n\nexport interface Program {\n\tbefore: Array<SeperatorItem>;\n\tbody: ProgramBody;\n\tafter: Array<SeperatorItem>;\n}\n\nexport type ProgramBody = List | TableProgram | ModelProgram;\n\nexport interface TableProgram {\n\tkind: 'table';\n\theader: Array<Name>\n\tbody: Array<Array<Scalar>>\n}\nexport interface ModelProgram {\n\tkind: \"model\";\n\tcontent: Array<Section>;\n}\n\nexport const isNewline = (w: SeperatorItem) => {\n\treturn w.kind === 'newline';\n}\n\nexport interface Block {\n\trelations: Relation[];\n\tseperators: SeperatorItem[][];\n}\n\nexport type SeperatorItem = Newline | Comment\nexport interface Newline {\n\tkind: 'newline'\n}\nexport interface Comment {\n\tkind: 'comment';\n\tcontent: string;\n}\n\n\nexport interface Section {\n\tkind: \"model\" | 'data';\n\tbody: Block;\n}\n\nexport type Relation = StochasticRelation | DeterministicRelation | IndexedRelation\nexport interface StochasticRelation {\n\tkind: \"~\"\n\tlhs: Expression;\n\trhs: Expression;\n\tcti: null | {\n\t\tkind: 'C' | 'T' | 'I';\n\t\tlower: Expression | null;\n\t\tupper: Expression | null;\n\t}\n}\nexport interface DeterministicRelation {\n\tkind: \"=\";\n\tlhs: Expression;\n\trhs: Expression;\n}\nexport interface IndexedRelation {\n\tkind: \"for\";\n\tname: Name;\n\tdomain: Expression;\n\tbody: Block;\n}\n\nexport type Expression = Variable | Scalar | Application | Subscription | ParenthesizedExpression | BinOp | UnOp\n\nexport interface Variable {\n\tkind: \"variable\";\n\tname: Name;\n}\n\nexport interface Name {\n\tliteral: string;\n\tstart: Position;\n\tend: Position;\n}\n\nexport interface Scalar {\n\tkind: 'scalar';\n\tliteral: string;\n}\n\nexport type Op1 = '-'\nexport type Op2 = '+' | '-' | '*' | '/' | ':'\n\nexport interface UnOp {\n\tkind: 'unop';\n\toperator: Op1;\n\texp: Expression;\n}\n\nexport interface BinOp {\n\tkind: 'binop';\n\toperator: Op2;\n\tlft: Expression;\n\trht: Expression;\n}\n\nexport interface Application {\n\tkind: \"application\";\n\toperator: Expression;\n\toperands: Array<Expression>;\n}\n\nexport interface Subscription {\n\tkind: \"subscription\";\n\toperator: Expression;\n\toperands: Array<Expression | null>;\n}\n\nexport interface Structure {\n\tkind: \"structure\";\n\tdata: ListExp;\n\tdim: ListExp;\n}\n\nexport interface List {\n\tkind: \"list\";\n\tcontent: Array<[Name, ListExp]>;\n}\n\nexport type ListExp = Scalar | NA | Structure | ListExpC;\n\nexport interface NA {\n\tkind: 'NA'\n}\n\nexport interface ListExpC {\n\tkind: 'c',\n\tcontent: Array<ListExp>\n}\n\nexport interface ParenthesizedExpression {\n\tkind: \"()\";\n\tcontent: Expression;\n}\n\nexport function prettyPrint(p: Program): string {\n\tfunction pName(name: Name): Doc {\n\t\treturn PP.text(name.literal);\n\t}\n\tconst pExpNullable = (e: Expression | null) => {\n\t\tif (e === null) {\n\t\t\treturn PP.text(\"\")\n\t\t} else {\n\t\t\treturn pExp(e);\n\t\t}\n\t}\n\tfunction pScalar(scalar: Scalar): Doc {\n\t\treturn PP.text(scalar.literal)\n\t}\n\tfunction pExp(exp: Expression): Doc {\n\t\tif (exp.kind === 'variable') {\n\t\t\treturn pName(exp.name);\n\t\t} else if (exp.kind === 'scalar') {\n\t\t\treturn pScalar(exp)\n\t\t} else if (exp.kind === 'application') {\n\t\t\treturn PP.fconcat([\n\t\t\t\tpExp(exp.operator),\n\t\t\t\tPP.text(\"(\"),\n\t\t\t\tPP.fconcat(Seq.intersperse(PP.text(\", \"), exp.operands.map(pExp))),\n\t\t\t\tPP.text(\")\"),\n\t\t\t])\n\t\t} else if (exp.kind === 'subscription') {\n\t\t\treturn PP.fconcat([\n\t\t\t\tpExp(exp.operator),\n\t\t\t\tPP.text(\"[\"),\n\t\t\t\tPP.fconcat(Seq.intersperse(PP.text(\", \"), exp.operands.map(pExpNullable))),\n\t\t\t\tPP.text(\"]\"),\n\t\t\t])\n\t\t} else if (exp.kind === 'binop') {\n\t\t\treturn PP.fconcat([\n\t\t\t\tpExp(exp.lft),\n\t\t\t\tPP.text(' '),\n\t\t\t\tPP.text(exp.operator),\n\t\t\t\tPP.text(' '),\n\t\t\t\tpExp(exp.rht)\n\t\t\t])\n\t\t} else if (exp.kind === 'unop') {\n\t\t\treturn PP.fconcat([\n\t\t\t\tPP.text(exp.operator),\n\t\t\t\tPP.text(' '),\n\t\t\t\tpExp(exp.exp)\n\t\t\t])\n\t\t} else {\n\t\t\treturn PP.fconcat([\n\t\t\t\tPP.text(\"(\"),\n\t\t\t\tpExp(exp.content),\n\t\t\t\tPP.text(\")\"),\n\t\t\t])\n\t\t}\n\t}\n\tfunction pListExp(exp: ListExp): Doc {\n\t\tif (exp.kind === 'scalar') {\n\t\t\treturn pScalar(exp)\n\t\t} else if (exp.kind === 'NA') {\n\t\t\treturn PP.text('NA')\n\t\t} else if (exp.kind === 'structure') {\n\t\t\treturn pStructure(exp)\n\t\t} else {\n\t\t\treturn PP.fconcat([\n\t\t\t\tPP.text(\"c(\"),\n\t\t\t\t...Seq.intersperse(\n\t\t\t\t\tPP.text(', '),\n\t\t\t\t\texp.content.map(pListExp)),\n\t\t\t\tPP.text(')')\n\t\t\t])\n\t\t}\n\t}\n\tfunction pStructure(exp: Structure): Doc {\n\t\treturn PP.vconcat([\n\t\t\tPP.text(\"structure(\"),\n\t\t\tPP.nest(PP.vconcat([\n\t\t\t\tPP.fconcat([\n\t\t\t\t\tPP.fconcat([PP.text(\".Data=\"), pListExp(exp.data)]),\n\t\t\t\t\tPP.text(',')\n\t\t\t\t]),\n\t\t\t\tPP.fconcat([PP.text(\".Dim=\"), pListExp(exp.dim)])\n\t\t\t])),\n\t\t\tPP.text(\")\")\n\t\t])\n\t}\n\tfunction pCTI(cti: StochasticRelation['cti']): Doc {\n\t\tif (cti === null) {\n\t\t\treturn PP.text(\"\")\n\t\t} else {\n\t\t\treturn PP.fconcat([\n\t\t\t\tPP.text(cti.kind),\n\t\t\t\tPP.text('('),\n\t\t\t\tpExpNullable(cti.lower),\n\t\t\t\tPP.text(', '),\n\t\t\t\tpExpNullable(cti.upper),\n\t\t\t\tPP.text(')'),\n\t\t\t])\n\t\t}\n\t}\n\tfunction pComment(cmt: Comment): Doc {\n\t\treturn PP.text(\"#\" + cmt.content)\n\t}\n\tfunction pSeperator(item: SeperatorItem): Doc {\n\t\tif (item.kind === 'newline') {\n\t\t\treturn PP.text(\"\")\n\t\t} else {\n\t\t\treturn pComment(item)\n\t\t}\n\t}\n\tfunction pSeperators(seps: Array<SeperatorItem>): Array<Doc> {\n\t\treturn seps.map(pSeperator)\n\t}\n\tfunction pBlock(block: Block): Doc {\n\t\ttype SimpleRelation = StochasticRelation | DeterministicRelation;\n\t\ttype BlockSection = SimpleRelationSection | IndexedRelation | SeperatorSection;\n\t\tinterface SimpleRelationSection {\n\t\t\tkind: 'srs';\n\t\t\trels: { r: SimpleRelation, c?: Comment }[];\n\t\t}\n\t\tinterface SeperatorSection {\n\t\t\tkind: 'ss';\n\t\t\tsep: SeperatorItem[];\n\t\t}\n\t\tfunction group(block: Block): BlockSection[] {\n\t\t\tconst result: BlockSection[] = [];\n\t\t\tfunction pushSep(sep: SeperatorItem[]) {\n\t\t\t\tif (sep.length > 0 && sep[0].kind === 'newline') {\n\t\t\t\t\tsep = sep.slice(1)\n\t\t\t\t}\n\t\t\t\tif (sep.length > 0) {\n\t\t\t\t\tresult.push({ kind: 'ss', sep })\n\t\t\t\t}\n\t\t\t}\n\t\t\tpushSep(block.seperators[0])\n\t\t\tfor (let i = 0; i < block.relations.length; i++) {\n\t\t\t\tconst r = block.relations[i];\n\t\t\t\tlet c = block.seperators[i + 1];\n\t\t\t\tif (r.kind === 'for') {\n\t\t\t\t\tresult.push(r)\n\t\t\t\t\tpushSep(c)\n\t\t\t\t} else {\n\t\t\t\t\tconst last = result.length > 0 ? result[result.length - 1] : undefined;\n\t\t\t\t\tlet lastSrs: SimpleRelationSection;\n\t\t\t\t\tif (last !== undefined && last.kind === 'srs') {\n\t\t\t\t\t\tlast.rels.push({ r })\n\t\t\t\t\t\tlastSrs = last;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlastSrs = { kind: 'srs', rels: [{ r }] }\n\t\t\t\t\t\tresult.push(lastSrs)\n\t\t\t\t\t}\n\t\t\t\t\tif (c.length > 0 && c[0].kind === 'comment') {\n\t\t\t\t\t\tlastSrs.rels[lastSrs.rels.length - 1].c = c[0]\n\t\t\t\t\t\tc[0] = { kind: 'newline' }\n\t\t\t\t\t}\n\t\t\t\t\tpushSep(c)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\tconst blockSections = group(block);\n\t\treturn PP.vconcat(blockSections.map((bc) => {\n\t\t\tif (bc.kind === 'for') {\n\t\t\t\treturn pRelation(bc)\n\t\t\t} else if (bc.kind === 'srs') {\n\t\t\t\treturn PP.equations(bc.rels.map(({ r, c }) => {\n\t\t\t\t\tlet suffix = (c === undefined\n\t\t\t\t\t\t? PP.text('')\n\t\t\t\t\t\t: PP.fconcat([PP.text(' '), pComment(c)]))\n\t\t\t\t\tif (r.kind === '=') {\n\t\t\t\t\t\treturn [pExp(r.lhs), ' <- ', PP.fconcat([pExp(r.rhs), suffix])]\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsuffix = PP.fconcat([pCTI(r.cti), suffix])\n\t\t\t\t\t\treturn [pExp(r.lhs), ' ~ ', PP.fconcat([pExp(r.rhs), suffix])]\n\t\t\t\t\t}\n\t\t\t\t}))\n\t\t\t} else {\n\t\t\t\treturn PP.vconcat(pSeperators(bc.sep))\n\t\t\t}\n\t\t}))\n\t}\n\tfunction pRelation(rel: Relation): Doc {\n\t\tif (rel.kind === 'for') {\n\t\t\treturn PP.vconcat([\n\t\t\t\tPP.fconcat([\n\t\t\t\t\tPP.text(\"for (\"),\n\t\t\t\t\tpName(rel.name),\n\t\t\t\t\tPP.text(\" in \"),\n\t\t\t\t\tpExp(rel.domain),\n\t\t\t\t\tPP.text(\") {\")\n\t\t\t\t]),\n\t\t\t\tPP.nest(pBlock(rel.body)),\n\t\t\t\tPP.text(\"}\")\n\t\t\t])\n\t\t} else if (rel.kind === \"=\") {\n\t\t\treturn PP.vconcat([\n\t\t\t\tPP.fconcat([\n\t\t\t\t\tpExp(rel.lhs),\n\t\t\t\t\tPP.text(' <- '),\n\t\t\t\t\tpExp(rel.rhs),\n\t\t\t\t]),\n\t\t\t])\n\t\t} else {\n\t\t\treturn PP.vconcat([\n\t\t\t\tPP.fconcat([\n\t\t\t\t\tpExp(rel.lhs),\n\t\t\t\t\tPP.text(' ~ '),\n\t\t\t\t\tpExp(rel.rhs),\n\t\t\t\t\tpCTI(rel.cti),\n\t\t\t\t]),\n\t\t\t])\n\t\t}\n\t}\n\tfunction pList(list: List): Doc {\n\t\treturn PP.fconcat([\n\t\t\tPP.text(\"list(\"),\n\t\t\t...Seq.intersperse(\n\t\t\t\tPP.text(', '),\n\t\t\t\tlist.content.map(([name, exp]) => {\n\t\t\t\t\treturn PP.fconcat([pName(name), PP.text(' = '), pListExp(exp)])\n\t\t\t\t})),\n\t\t\tPP.text(')')\n\t\t])\n\t}\n\tfunction pSection(s: Section): Doc {\n\t\treturn PP.vconcat([\n\t\t\tPP.vconcat([\n\t\t\t\tPP.text(s.kind),\n\t\t\t\tPP.text(\"{\"),\n\t\t\t]),\n\t\t\tPP.nest(pBlock(s.body)),\n\t\t\tPP.fconcat([PP.text(\"}\")])\n\t\t])\n\t}\n\tfunction pProgram(p: Program): Doc {\n\t\tlet before = p.before;\n\t\tlet after = p.after;\n\t\twhile (after.length > 0 && after[after.length - 1].kind === 'newline') {\n\t\t\tafter = after.slice(0, -1)\n\t\t}\n\t\treturn PP.vconcat([\n\t\t\t...pSeperators(before),\n\t\t\tpProgramBody(p.body),\n\t\t\t...pSeperators(after)\n\t\t])\n\t}\n\tfunction pProgramBody(p: ProgramBody): Doc {\n\t\tif (p.kind === 'list') {\n\t\t\treturn pList(p)\n\t\t} if (p.kind === 'table') {\n\t\t\treturn PP.vconcat([\n\t\t\t\tPP.fconcat(Seq.intersperse(PP.text(' '), p.header.map((name) => PP.fconcat([pName(name), PP.text('[]')])))),\n\t\t\t\tPP.vconcat(\n\t\t\t\t\tp.body.map((row) => {\n\t\t\t\t\t\treturn PP.fconcat(Seq.intersperse(PP.text(' '), row.map(pScalar)))\n\t\t\t\t\t})\n\t\t\t\t),\n\t\t\t\tPP.text('END')\n\t\t\t])\n\t\t} else {\n\t\t\treturn PP.vconcat(p.content.map(pSection))\n\t\t}\n\t}\n\treturn PP.toString(pProgram(p));\n}\n"],
  "mappings": "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",
  "names": []
}
