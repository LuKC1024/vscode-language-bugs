// This grammar of the BUGS language is created with manual inspectation of the OpenBUGS manual.
// Although this grammar has been tested with 240 programs extracted from OpenBUGS documents (only 2 programs were not parsed and they are all data definition written in rectangular format, support of which is a non-goal), I am not sure if this grammar is comprehensive enough.
// Firemodel.txt includes a line `xa ~ dlnorm( mu, tau ) I( , theta )`. This syntax is not documented in OpenBUGS manual.

program  := before=sep body=programBody after=sep
programBody := list | rectangular | sectionList

rectangular := header=rectangularHeader body={sep=rowSep item=rectangularBodyItem}* sep=sep footer=rectangularFooter
colSep := blank
rowSep := blank '[\n]' | blank comment=comment
rectangularHeader := content={sep=colSep item=name '\[\]'}+
rectangularFooter := colSep 'END'
rectangularBodyItem := content={sep=colSep item=scalar}+

section := header=sectionHeader sep=sep body=block
sectionHeader := v='model' | v='data'
sectionList := head=section tail={sep=sep item=section}*

block := '{' before=relationSep body=relationList after=relationSep '}'

relation    := stochasticRelation | deterministicRelation | indexedRelation
relationSep := body={sep=blank item=relationSepItem}* blank
relationSepItem := sepItem | v=';'
relationList := head=relation tail={sep=relationSep item=relation}*

cti := sep header=ctiHeader '[(]' sep lower=exp? '[,]' sep upper=exp?  sep'[)]'
ctiHeader := v='C' | v='T' | v='I'

stochasticRelation      := lhs=exp beforeOp=sep '~' afterOp=sep rhs=exp cti=cti?
deterministicRelation   := lhs=exp beforeOp=sep '<-' afterOp=sep rhs=exp
indexedRelation         := 'for' blank '\(' blank name=name blank 'in' blank domain=exp blank '\)' afterParenR=sep body=block

// simple concepts
blank   := v='[^\S\n]*'
newline := v='[\n]'
comment := '[#]' content='[^\n]*' '[\n]'
sep     := body={sep=blank item=sepItem}* blank
sepItem := newline | comment

exp  := exp5
exp0 := scalar | structure | list | '\(' before=sep exp=exp5 after=sep '\)' | name 
exp1 := base=exp0 applications=application*
exp2 := '-' between=sep exp=exp1 | exp1
exp3 := left=exp3 beforeOp=sep op=addSub afterOp=sep right=exp2 | exp2
exp4 := left=exp4 beforeOp=sep op=mulDiv afterOp=sep right=exp3 | exp3
exp5 := left=exp5 beforeOp=sep ':' afterOp=sep right=exp4 | exp4 
application := functionApplication | vectorApplication
functionApplication := beforeParen=sep '\(' beginArgs=sep operands=argumentList endArgs=sep '\)'
vectorApplication := beforeParen=sep '\[' beginInds=sep operands=indexList endInds=sep '\]'

addSub := v='\+' | v='-'
mulDiv := v='\*' | v='/'

list := 'list[(]' beforeFields=sep operands=fieldList afterFields=sep '[)]'
structure := 'structure[(]' begin=sep '\.' sepDotData=sep 'Data' eqData=nameValueSep data=exp operandSep '\.' sepDotDim=sep 'Dim' eqDim=nameValueSep dim=exp end=sep '[)]'

operandSep := before=sep ',' after=sep
argument     := exp
argumentList := content={first=argument rest={sep=operandSep item=argument}*}?
indexList := content={first=exp? rest={sep=operandSep item=exp?}*}?
field     := name=name sep=nameValueSep value=exp
fieldList := content={first=field rest={sep=operandSep item=field}*}?
nameValueSep  := before=sep '=' after=sep

name := from=@ value='[a-zA-Z][a-zA-Z0-9._]*' to=@
scalar := value='-?([\d]+([.][\d]+)?|([\d]+)?[.][\d]+)([eE]-?[\d]+)?'
